{"version":3,"file":"main.bundle.js","mappings":";;;;;;;;;;;;;;AAAkD;AACR;AAG1C,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAsB,CAAC;AACtE,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAmB,CAAC;AAEpE,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;AAChD,MAAM,MAAM,GAAG,IAAI,+CAAM,CAAC,mDAAU,CAAC,WAAW,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;AAE9D,MAAM,QAAQ,GAAG,IAAI,mDAAQ,CAAC,MAAM,CAAC,CAAC;AACtC,MAAM,QAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;AAE1C,IAAI,UAAU,GAAyB,IAAI,GAAG,EAAE,CAAC;AACjD,IAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,IAAI,SAAS,GAAG,CAAC,CAAC;AAClB,IAAI,KAAK,GAAG,KAAK,CAAC;AAElB,IAAI,MAAM,GAAG,CAAC,IAAY,EAAE,EAAE;IAC1B,UAAU,CAAC,SAAS,GAAG,QAAQ,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE;IAC5E,SAAS,GAAG,IAAI,GAAG,QAAQ,CAAC;IAC5B,QAAQ,GAAG,IAAI,CAAC;IAChB,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;QACtB,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,GAAG,SAAS,CAAC;QACvC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC;IACpC,CAAC;IACD,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC;IACnC,CAAC;IACD,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,GAAG,SAAS,CAAC,CAAC;IACzC,CAAC;IACD,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC;IAC1C,CAAC;IACD,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,GAAG,SAAS,EAAE,CAAC,CAAC,CAAC;IACzC,CAAC;IACD,IAAI,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,SAAS,EAAE,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC9B,qBAAqB,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC;AACD,qBAAqB,CAAC,MAAM,CAAC,CAAC;AAE9B,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE;IACrC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;IACnC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;ACpD2E;AAE9E,IAAY,UAEX;AAFD,WAAY,UAAU;IAClB,yDAAW;AACf,CAAC,EAFW,UAAU,KAAV,UAAU,QAErB;AAEM,MAAM,MAAM;IACR,QAAQ,CAAS;IACjB,WAAW,CAAS;IAEpB,IAAI,CAAa;IACjB,GAAG,CAAS;IACZ,IAAI,CAAS;IACb,GAAG,CAAS;IACZ,WAAW,CAAS;IAEpB,gBAAgB,GAAG,yFAAa,EAAE,CAAC;IACnC,cAAc,GAAG,yFAAa,EAAE,CAAC;IACjC,cAAc,GAAG,yFAAa,EAAE,CAAC;IAExC,YAAY,IAAgB,EAAE,WAAmB,EAAE,GAAY,EAAE,IAAa,EAAE,GAAY;QACxF,IAAI,CAAC,QAAQ,GAAG;YACZ,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,CAAC,GAAG;SACV,CAAC;QACF,IAAI,CAAC,WAAW,GAAG;YACf,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,GAAG;SACT,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,GAAG,GAAG,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;QACxE,IAAI,CAAC,IAAI,GAAG,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;QAC5C,IAAI,CAAC,GAAG,GAAG,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAE/B,IAAI,CAAC,gBAAgB,GAAG,4FAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9F,CAAC;IAEM,IAAI,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG;QACjC,0FAAc,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACxE,CAAC;IAEM,MAAM,CAAC,QAAQ,GAAG,GAAG,EAAE,QAAQ,GAAG,GAAG,EAAE,QAAQ,GAAG,GAAG;QACxD,IAAI,QAAQ,GAAG,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC;QACxC,IAAI,QAAQ,GAAG,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC;QACxC,IAAI,QAAQ,GAAG,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC;QAExC,wFAAY,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACjE,wFAAY,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACjE,wFAAY,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACrE,CAAC;IAEM,SAAS;QACZ,IAAI,GAAG,GAAG,uFAAW,EAAE,CAAC;QACxB,yFAAa,CAAC,GAAG,CAAC,CAAC;QACnB,yFAAa,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC7C,yFAAa,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC7C,yFAAa,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAE/C,OAAO,GAAG,CAAC;IACf,CAAC;CAUJ;;;;;;;;;;;;;;;;ACvE8C;AAExC,MAAM,QAAQ;IACT,MAAM,CAAoB;IAC1B,MAAM,CAAa;IACnB,OAAO,CAAoB;IAC3B,kBAAkB,CAAoB;IACtC,cAAc,CAAqB;IACnC,oBAAoB,CAA2B;IAEhD,eAAe,CAAgB;IAE9B,YAAY,CAAa;IACzB,YAAY,CAAa;IAEjC,YAAY,MAAyB;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,MAAc;QAC1C,IAAI,SAAS,CAAC,GAAG,KAAK,SAAS,EAAE,CAAC;YAC9B,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;YAC7D,OAAO;QACX,CAAC;QACD,aAAa;QACb,IAAI,OAAO,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;QACnD,IAAI,CAAC,MAAM,GAAG,MAAM,OAAQ,CAAC,aAAa,EAAE,CAAC;QAC7C,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;YAC5B,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;YAChD,OAAO;QACX,CAAC;QAED,oBAAoB;QACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAqB,CAAC;QACpE,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC,GAAG,CAAC,wBAAwB,EAAE,CAAC;QACnE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;YACnB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,IAAI,CAAC,kBAAkB;YAC/B,SAAS,EAAE,eAAe;SAC7B,CAAC,CAAC;QAEH,yBAAyB;QACzB,MAAM,wBAAwB,GAAG,IAAI,CAAC,8BAA8B,EAAE,CAAC;QACvE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,CAAC;QAEjF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;YACzC,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,QAAQ;SAC1D,CAAC;QAEF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;YACzC,IAAI,EAAE,CAAC,GAAG,CAAC;YACX,KAAK,EAAE,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,QAAQ;SAC1D,CAAC;QAEF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC/C,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACjD,OAAO,EAAE;gBACL,EAAE,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,EAAE;gBACvD,EAAE,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,EAAE;aAC1D;SACJ,CAAC;QAEF,wBAAwB;QACxB,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;YAC3C,IAAI,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,MAAM,CAAC;YACvF,MAAM,EAAE,aAAa;YACrB,KAAK,EAAE,eAAe,CAAC,iBAAiB;SAC3C,CAAC,CAAC;QAEH,oCAAoC;QACpC,IAAI,CAAC,oBAAoB,GAAG;YACxB,KAAK,EAAE,gCAAgC;YACvC,gBAAgB,EAAE;gBACd;oBACI,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC9B,MAAM,EAAE,OAAO;oBACf,OAAO,EAAE,OAAO;iBACnB;aACJ;YACD,sBAAsB,EAAE;gBACpB,IAAI,EAAE,YAAY,CAAC,UAAU,EAAE;gBAC/B,eAAe,EAAE,GAAG;gBACpB,WAAW,EAAE,OAAO;gBACpB,YAAY,EAAE,OAAO;aACxB;SACuB,CAAC;IACjC,CAAC;IAEO,8BAA8B,GAAG,GAAG,EAAE;QAC1C,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,IAAI,EAAE,gEAAM,EAAE,CAAC,CAAC;QAEhE,MAAM,+BAA+B,GAAiC;YAClE,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,UAAU,EAAE,cAAc,CAAC,MAAM;oBACjC,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;iBAC9B;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,UAAU,EAAE,cAAc,CAAC,MAAM;oBACjC,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;iBAC9B;aACJ;SACJ,CAAC;QAEF,MAAM,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,+BAA+B,CAAC,CAAC;QACjG,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;YACpD,gBAAgB,EAAE,CAAC,qBAAqB,CAAC;SAC5C,CAAC;QAEF,IAAI,wBAAwB,GAAG;YAC3B,KAAK,EAAE,yBAAyB;YAChC,MAAM,EAAE,cAAc;YACtB,MAAM,EAAE;gBACJ,MAAM,EAAE,MAAM;aACjB;YACD,QAAQ,EAAE;gBACN,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,kBAAkB,EAAE,CAAC;aACjD;YACD,YAAY,EAAE;gBACV,MAAM,EAAE,aAAa;gBACrB,iBAAiB,EAAE,IAAI;gBACvB,YAAY,EAAE,MAAM;aACvB;SAC2B,CAAC;QACjC,OAAO,wBAAwB,CAAC;IACpC,CAAC;IAEM,MAAM,GAAG,CAAC,MAAc,EAAE,IAAY,EAAE,KAAa,EAAE,EAAE;QAC5D,6BAA6B;QAC7B,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,IAAI,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEpF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,MAAM,CAAC,SAAS,EAAkB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAE9F,KAAK,IAAI,EAAE,IAAI,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,EAAE,CAAC;YACxD,EAAG,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,CAAC;QAC7D,CAAC;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC,CAAC;QAC/E,MAAM,UAAU,GAAG,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACtE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACjD,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,UAAU,CAAC,GAAG,EAAE,CAAC;QAEjB,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;IAC9C,CAAC;CACJ;AAAA,CAAC;;;;;;;;;;;;;;;ACzJF,iEAAe,gBAAgB,uBAAuB,uBAAuB,6BAA6B,uBAAuB,yFAAyF,wDAAwD,mDAAmD,+FAA+F,8NAA8N,sNAAsN,gDAAgD,wCAAwC,KAAK,sDAAsD,iCAAiC,KAAK;;;;;;;;;;;ACAjhC;AACA;AACA;AACA;AACA,6GAA6G;AAC7G,CAAC,EAAE,SAAI,wBAAwB;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzkDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChkCAAkC,iBAAiB;AACnD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD,iBAAiB,mBAAmB,KAAK;AACzoDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzkDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChkCAAkC,iBAAiB;AACnD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,cAAc;AAC7B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,cAAc;AAC7B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,cAAc;AAC7B,eAAe,QAAQ;AACvB;AACA,iBAAiB,MAAM;AACvqDAAqD;AACrD;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB,KAAK;AACzkCAAkC,iBAAiB;AACnD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD,iBAAiB,mBAAmB,KAAK;AACzoDAAoD;AACpoCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjwCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gBAAgB;AACtD,iBAAiB,mBAAmB,KAAK;AACzmCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzkCAAkC,iBAAiB;AACnD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,iBAAiB,mBAAmB,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD;;;;;;;UC5oLA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,IAAI;WACJ;WACA;WACA,IAAI;WACJ;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,CAAC;WACD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA,sGAAsG;WACtG;WACA;WACA;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA,EAAE;WACF;WACA;;;;;WChEA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA","sources":["webpack://webgpu/./main.ts","webpack://webgpu/./src/camera.ts","webpack://webgpu/./src/renderer.ts","webpack://webgpu/./src/shaders/shaderMain.wgsl","webpack://webgpu/./node_modules/wgpu-matrix/dist/2.x/wgpu-matrix.js","webpack://webgpu/webpack/bootstrap","webpack://webgpu/webpack/runtime/async module","webpack://webgpu/webpack/runtime/define property getters","webpack://webgpu/webpack/runtime/hasOwnProperty shorthand","webpack://webgpu/webpack/runtime/make namespace object","webpack://webgpu/webpack/before-startup","webpack://webgpu/webpack/startup","webpack://webgpu/webpack/after-startup"],"sourcesContent":["import { Camera, CameraType } from \"./src/camera\";\r\nimport { Renderer } from \"./src/renderer\";\r\nimport { vec3, mat4 } from \"./node_modules/wgpu-matrix/dist/2.x/wgpu-matrix\";\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst fpsCounter = document.getElementById(\"fps\") as HTMLDivElement;\r\n\r\nlet aspect = canvas.width * 1.0 / canvas.height;\r\nconst camera = new Camera(CameraType.perspective, aspect, 60);\r\n\r\nconst renderer = new Renderer(canvas);\r\nawait renderer.initializeRenderer(camera);\r\n\r\nlet keyPressed: Map<String, boolean> = new Map();\r\nlet lastTime = 0;\r\nlet deltaTime = 0;\r\nlet speed = 0.003;\r\n\r\nlet render = (time: number) => {\r\n    fpsCounter.innerText = `FPS: ${Math.round(1 / ((time - lastTime) * 0.001))}`\r\n    deltaTime = time - lastTime;\r\n    lastTime = time;\r\n    if (keyPressed.get(\"a\")) {\r\n        camera.position.x -= speed * deltaTime;\r\n        camera.move(-speed * deltaTime);\r\n    }\r\n    if (keyPressed.get(\"d\")) {\r\n        camera.move(speed * deltaTime);\r\n    }\r\n    if (keyPressed.get(\"w\")) {\r\n        camera.move(0, 0, speed * deltaTime);\r\n    }\r\n    if (keyPressed.get(\"s\")) {\r\n        camera.move(0, 0, -speed * deltaTime);\r\n    }\r\n    if (keyPressed.get(\" \")) {\r\n        camera.move(0, speed * deltaTime, 0);\r\n    }\r\n    if (keyPressed.get(\"Shift\")) {\r\n        camera.move(0, -speed * deltaTime, 0);\r\n    }\r\n\r\n    renderer.render(camera, time);\r\n    requestAnimationFrame(render);\r\n}\r\nrequestAnimationFrame(render);\r\n\r\nwindow.addEventListener(\"keydown\", (e) => {\r\n    keyPressed.set(e.key, true);\r\n});\r\n\r\nwindow.addEventListener(\"keyup\", (e) => {\r\n    keyPressed.set(e.key, false);\r\n});\r\n","import { Coords, Object } from \"./object\";\r\nimport { vec3, mat4 } from \"../node_modules/wgpu-matrix/dist/2.x/wgpu-matrix\";\r\n\r\nexport enum CameraType {\r\n    perspective,\r\n}\r\n\r\nexport class Camera implements Object {\r\n    public position: Coords;\r\n    public orientation: Coords;\r\n\r\n    public type: CameraType;\r\n    public fov: number;\r\n    public near: number;\r\n    public far: number;\r\n    public aspectRatio: number;\r\n\r\n    public projectionMatrix = mat4.identity();\r\n    public positionMatrix = mat4.identity();\r\n    public rotationMatrix = mat4.identity();\r\n    \r\n    constructor(type: CameraType, aspectRatio: number, fov?: number, near?: number, far?: number) {\r\n        this.position = {\r\n            x: 0.0,\r\n            y: 0.0,\r\n            z: -3.0,\r\n        };\r\n        this.orientation = {\r\n            x: 0.0,\r\n            y: 0.0,\r\n            z: 0.0,\r\n        };        \r\n        this.type = type;\r\n        this.fov = fov === undefined ? 90 * Math.PI / 180 : fov * Math.PI / 180;\r\n        this.near = near === undefined ? 0.1 : near;\r\n        this.far = far === undefined ? 50 : far;\r\n        this.aspectRatio = aspectRatio;\r\n\r\n        this.projectionMatrix = mat4.perspective(this.fov, this.aspectRatio, this.near, this.far);\r\n    }\r\n\r\n    public move(x = 0.0, y = 0.0, z = 0.0){\r\n        mat4.translate(this.positionMatrix, [x, y, z], this.positionMatrix);\r\n    }\r\n\r\n    public rotate(degreesX = 0.0, degreesY = 0.0, degreesZ = 0.0){\r\n        let radiansX = degreesX * 180 / Math.PI;\r\n        let radiansY = degreesY * 180 / Math.PI;\r\n        let radiansZ = degreesZ * 180 / Math.PI;\r\n\r\n        mat4.rotateX(this.rotationMatrix, radiansX, this.rotationMatrix);\r\n        mat4.rotateY(this.rotationMatrix, radiansY, this.rotationMatrix);\r\n        mat4.rotateZ(this.rotationMatrix, radiansZ, this.rotationMatrix);\r\n    }\r\n\r\n    public calculate(){\r\n        let out = mat4.create();\r\n        mat4.identity(out);\r\n        mat4.multiply(this.rotationMatrix, out, out);\r\n        mat4.multiply(this.positionMatrix, out, out);\r\n        mat4.multiply(this.projectionMatrix, out, out);\r\n\r\n        return out;\r\n    }\r\n    // private setProjectionMatrix = () => {\r\n    //     let tempArr = new Float32Array(16);\r\n    //     tempArr[0] = 1.0 / (this.aspectRatio * Math.tan(this.fov / 2));\r\n    //     tempArr[5] = 1.0 / Math.tan(this.fov / 2);\r\n    //     tempArr[10] = this.far / (this.far - this.near);\r\n    //     tempArr[14] = 1;\r\n    //     tempArr[11] = -this.far * this.near / (this.far - this.near);\r\n    //     return tempArr;\r\n    // }\r\n}","import { Camera } from \"./camera\";\r\nimport { Scene } from \"./scene\";\r\nimport shader from \"./shaders/shaderMain.wgsl\";\r\n\r\nexport class Renderer {\r\n    private canvas: HTMLCanvasElement;\r\n    private device!: GPUDevice;\r\n    private context!: GPUCanvasContext;\r\n    private presentationFormat!: GPUTextureFormat;\r\n    private renderPipeline!: GPURenderPipeline;\r\n    private renderPassDescriptor!: GPURenderPassDescriptor;\r\n\r\n    public cameraBindGroup!: GPUBindGroup;\r\n\r\n    private staticBuffer!: GPUBuffer;\r\n    private cameraBuffer!: GPUBuffer;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    public async initializeRenderer(camera: Camera) {\r\n        if (navigator.gpu === undefined) {\r\n            console.log(\"This browser/device doesn't support WebGPU...\");\r\n            return;\r\n        }\r\n        // Get device\r\n        let adapter = await navigator.gpu.requestAdapter();\r\n        this.device = await adapter!.requestDevice();\r\n        if (this.device === undefined) {\r\n            console.log(\"Couldn't load device. Exiting...\");\r\n            return;\r\n        }\r\n\r\n        // Configure context\r\n        this.context = this.canvas.getContext('webgpu') as GPUCanvasContext;\r\n        this.presentationFormat = navigator.gpu.getPreferredCanvasFormat();\r\n        this.context.configure({\r\n            device: this.device,\r\n            format: this.presentationFormat,\r\n            alphaMode: 'premultiplied'\r\n        });\r\n\r\n        // Create render pipeline\r\n        const renderPipelineDescriptor = this.createRenderPipelineDescriptor();\r\n        this.renderPipeline = this.device.createRenderPipeline(renderPipelineDescriptor);\r\n\r\n        this.staticBuffer = this.device.createBuffer({\r\n            size: 4,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n        })\r\n\r\n        this.cameraBuffer = this.device.createBuffer({\r\n            size: 4 * 8,\r\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        this.cameraBindGroup = this.device.createBindGroup({\r\n            layout: this.renderPipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                { binding: 0, resource: { buffer: this.staticBuffer } },\r\n                { binding: 1, resource: { buffer: this.cameraBuffer } },\r\n            ]\r\n        })\r\n\r\n        // Prepare depth texture\r\n        const depthTexture = this.device.createTexture({\r\n            size: [this.context.getCurrentTexture().width, this.context.getCurrentTexture().height],\r\n            format: 'depth24plus',\r\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n        });\r\n\r\n        // Initialize render pass descriptor\r\n        this.renderPassDescriptor = {\r\n            label: 'Default render pass descriptor',\r\n            colorAttachments: [\r\n                {\r\n                    clearValue: [0.3, 0.3, 0.3, 1],\r\n                    loadOp: 'clear',\r\n                    storeOp: 'store',\r\n                },\r\n            ],\r\n            depthStencilAttachment: {\r\n                view: depthTexture.createView(),\r\n                depthClearValue: 1.0,\r\n                depthLoadOp: 'clear',\r\n                depthStoreOp: 'store',\r\n            },\r\n        } as GPURenderPassDescriptor;\r\n    }\r\n\r\n    private createRenderPipelineDescriptor = () => {\r\n        const module = this.device.createShaderModule({ code: shader });\r\n\r\n        const cameraBindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: { type: \"uniform\" },\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.VERTEX,\r\n                    buffer: { type: \"uniform\" },\r\n                },\r\n            ]\r\n        };\r\n\r\n        const cameraBindGroupLayout = this.device.createBindGroupLayout(cameraBindGroupLayoutDescriptor);\r\n        const pipelineLayout = this.device.createPipelineLayout({\r\n            bindGroupLayouts: [cameraBindGroupLayout]\r\n        })\r\n\r\n        let renderPipelineDescriptor = {\r\n            label: 'Default render pipeline',\r\n            layout: pipelineLayout,\r\n            vertex: {\r\n                module: module,\r\n            },\r\n            fragment: {\r\n                module: module,\r\n                targets: [{ format: this.presentationFormat }],\r\n            },\r\n            depthStencil: {\r\n                format: 'depth24plus',\r\n                depthWriteEnabled: true,\r\n                depthCompare: 'less'\r\n            }\r\n        } as GPURenderPipelineDescriptor;\r\n        return renderPipelineDescriptor;\r\n    }\r\n\r\n    public render = (camera: Camera, time: number, scene?: Scene) => {\r\n        // Calculate perspective view\r\n        time = time * 0.001;\r\n        this.device.queue.writeBuffer(this.staticBuffer, 0, new Float32Array([time]), 0, 1);\r\n                \r\n        this.device.queue.writeBuffer(this.cameraBuffer, 0, camera.calculate() as Float32Array, 0, 8);\r\n\r\n        for (let el of this.renderPassDescriptor.colorAttachments) {\r\n            el!.view = this.context.getCurrentTexture().createView();\r\n        }\r\n        const encoder = this.device.createCommandEncoder({ label: 'Default encoder' });\r\n        const renderPass = encoder.beginRenderPass(this.renderPassDescriptor);\r\n        renderPass.setPipeline(this.renderPipeline);\r\n        renderPass.setBindGroup(0, this.cameraBindGroup);\r\n        renderPass.draw(6);\r\n        renderPass.end();\r\n\r\n        const commandBuffer = encoder.finish();\r\n        this.device.queue.submit([commandBuffer]);\r\n    }\r\n};\r\n","export default \"struct Global {\\r\\n    time: f32,\\r\\n}\\r\\n\\r\\nstruct Camera {\\r\\n    matrix: mat4x4f,\\r\\n}\\r\\n\\r\\nstruct Object {\\r\\n    position: vec4f,\\r\\n    orientation: vec4f,\\r\\n    vertexData: array<vec4f>,\\r\\n}\\r\\n\\r\\n@group(0) @binding(0) var<uniform> glob: Global;\\r\\n@group(0) @binding(1) var<uniform> cam: Camera;\\r\\n\\r\\n@vertex\\r\\nfn vert(@builtin(vertex_index) vertIndex: u32) -> @builtin(position) vec4f {\\r\\n    let parallGram = array(\\r\\n        vec4f(1, 0, 0, 1),\\r\\n        vec4f(0, 1, 0, 1),\\r\\n        vec4f(-1, 0, 0, 1),\\r\\n        vec4f(1, 0, 0, 1),\\r\\n        vec4f(0, 1, 0, 1),\\r\\n        vec4f(2, 1, 0, 1),\\r\\n    );\\r\\n\\r\\n    let yRot = mat4x4f(\\r\\n        vec4f(cos(glob.time), 0, sin(glob.time), 0),\\r\\n        vec4f(0, 1, 0, 0),\\r\\n        vec4f(-sin(glob.time), 0, cos(glob.time), 0),\\r\\n        vec4f(0, 0, 0, 1),\\r\\n    );\\r\\n\\r\\n    let vertPos = parallGram[vertIndex];\\r\\n\\r\\n    return cam.matrix * vertPos;\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn frag() -> @location(0) vec4f {\\r\\n    return vec4f(1, 0, 0, 1);\\r\\n}\\r\\n\"","/* wgpu-matrix@2.9.1, license MIT */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.wgpuMatrix = {}));\n})(this, (function (exports) { 'use strict';\n\n    /*\n     * Copyright 2022 Gregg Tavares\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a\n     * copy of this software and associated documentation files (the \"Software\"),\n     * to deal in the Software without restriction, including without limitation\n     * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     * and/or sell copies of the Software, and to permit persons to whom the\n     * Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n     * DEALINGS IN THE SOFTWARE.\n     */\n    let EPSILON = 0.000001;\n    /**\n     * Set the value for EPSILON for various checks\n     * @param v - Value to use for EPSILON.\n     * @returns previous value of EPSILON;\n     */\n    function setEpsilon(v) {\n        const old = EPSILON;\n        EPSILON = v;\n        return old;\n    }\n    /**\n     * Convert degrees to radians\n     * @param degrees - Angle in degrees\n     * @returns angle converted to radians\n     */\n    function degToRad(degrees) {\n        return degrees * Math.PI / 180;\n    }\n    /**\n     * Convert radians to degrees\n     * @param radians - Angle in radians\n     * @returns angle converted to degrees\n     */\n    function radToDeg(radians) {\n        return radians * 180 / Math.PI;\n    }\n    /**\n     * Lerps between a and b via t\n     * @param a - starting value\n     * @param b - ending value\n     * @param t - value where 0 = a and 1 = b\n     * @returns a + (b - a) * t\n     */\n    function lerp$4(a, b, t) {\n        return a + (b - a) * t;\n    }\n    /**\n     * Compute the opposite of lerp. Given a and b and a value between\n     * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n     * Note: no clamping is done.\n     * @param a - start value\n     * @param b - end value\n     * @param v - value between a and b\n     * @returns (v - a) / (b - a)\n     */\n    function inverseLerp(a, b, v) {\n        const d = b - a;\n        return (Math.abs(b - a) < EPSILON)\n            ? a\n            : (v - a) / d;\n    }\n    /**\n     * Compute the euclidean modulo\n     *\n     * ```\n     * // table for n / 3\n     * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n     * ------------------------------------\n     * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n     *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n     * ```\n     *\n     * @param n - dividend\n     * @param m - divisor\n     * @returns the euclidean modulo of n / m\n     */\n    function euclideanModulo(n, m) {\n        return ((n % m) + m) % m;\n    }\n\n    var utils = {\n        __proto__: null,\n        get EPSILON () { return EPSILON; },\n        degToRad: degToRad,\n        euclideanModulo: euclideanModulo,\n        inverseLerp: inverseLerp,\n        lerp: lerp$4,\n        radToDeg: radToDeg,\n        setEpsilon: setEpsilon\n    };\n\n    /*\n     * Copyright 2022 Gregg Tavares\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a\n     * copy of this software and associated documentation files (the \"Software\"),\n     * to deal in the Software without restriction, including without limitation\n     * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     * and/or sell copies of the Software, and to permit persons to whom the\n     * Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n     * DEALINGS IN THE SOFTWARE.\n     */\n    /**\n     *\n     * Vec2 math functions.\n     *\n     * Almost all functions take an optional `dst` argument. If it is not passed in the\n     * functions will create a new Vec2. In other words you can do this\n     *\n     *     const v = vec2.cross(v1, v2);  // Creates a new Vec2 with the cross product of v1 x v2.\n     *\n     * or\n     *\n     *     const v = vec2.create();\n     *     vec2.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always safe to pass any vector as the destination. So for example\n     *\n     *     vec2.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n     *\n     */\n    let VecType$2 = Float32Array;\n    /**\n     * Sets the type this library creates for a Vec2\n     * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n     * @returns previous constructor for Vec2\n     */\n    function setDefaultType$6(ctor) {\n        const oldType = VecType$2;\n        VecType$2 = ctor;\n        return oldType;\n    }\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values.\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Vec2's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const v = vec2.clone(someJSArray);\n     * ```\n     *\n     * Note: a consequence of the implementation is if your Vec2Type = `Array`\n     * instead of `Float32Array` or `Float64Array` then any values you\n     * don't pass in will be undefined. Usually this is not an issue since\n     * (a) using `Array` is rare and (b) using `vec2.create` is usually used\n     * to create a Vec2 to be filled out as in\n     *\n     * ```\n     * const sum = vec2.create();\n     * vec2.add(v1, v2, sum);\n     * ```\n     *\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    function create$5(x = 0, y = 0) {\n        const dst = new VecType$2(2);\n        if (x !== undefined) {\n            dst[0] = x;\n            if (y !== undefined) {\n                dst[1] = y;\n            }\n        }\n        return dst;\n    }\n\n    /*\n     * Copyright 2022 Gregg Tavares\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a\n     * copy of this software and associated documentation files (the \"Software\"),\n     * to deal in the Software without restriction, including without limitation\n     * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     * and/or sell copies of the Software, and to permit persons to whom the\n     * Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n     * DEALINGS IN THE SOFTWARE.\n     */\n    /**\n     *\n     * Vec3 math functions.\n     *\n     * Almost all functions take an optional `dst` argument. If it is not passed in the\n     * functions will create a new `Vec3`. In other words you can do this\n     *\n     *     const v = vec3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n     *\n     * or\n     *\n     *     const v = vec3.create();\n     *     vec3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always safe to pass any vector as the destination. So for example\n     *\n     *     vec3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n     *\n     */\n    let VecType$1 = Float32Array;\n    /**\n     * Sets the type this library creates for a Vec3\n     * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n     * @returns previous constructor for Vec3\n     */\n    function setDefaultType$5(ctor) {\n        const oldType = VecType$1;\n        VecType$1 = ctor;\n        return oldType;\n    }\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    function create$4(x, y, z) {\n        const dst = new VecType$1(3);\n        if (x !== undefined) {\n            dst[0] = x;\n            if (y !== undefined) {\n                dst[1] = y;\n                if (z !== undefined) {\n                    dst[2] = z;\n                }\n            }\n        }\n        return dst;\n    }\n\n    /*\n     * Copyright 2022 Gregg Tavares\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a\n     * copy of this software and associated documentation files (the \"Software\"),\n     * to deal in the Software without restriction, including without limitation\n     * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     * and/or sell copies of the Software, and to permit persons to whom the\n     * Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n     * DEALINGS IN THE SOFTWARE.\n     */\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    const fromValues$3 = create$5;\n    /**\n     * Sets the values of a Vec2\n     * Also see {@link vec2.create} and {@link vec2.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set$5(x, y, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = x;\n        dst[1] = y;\n        return dst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil$2(v, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = Math.ceil(v[0]);\n        dst[1] = Math.ceil(v[1]);\n        return dst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor$2(v, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = Math.floor(v[0]);\n        dst[1] = Math.floor(v[1]);\n        return dst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round$2(v, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = Math.round(v[0]);\n        dst[1] = Math.round(v[1]);\n        return dst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp$2(v, min = 0, max = 1, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = Math.min(max, Math.max(min, v[0]));\n        dst[1] = Math.min(max, Math.max(min, v[1]));\n        return dst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add$3(a, b, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = a[0] + b[0];\n        dst[1] = a[1] + b[1];\n        return dst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled$2(a, b, scale, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = a[0] + b[0] * scale;\n        dst[1] = a[1] + b[1] * scale;\n        return dst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle$2(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const bx = b[0];\n        const by = b[1];\n        const mag1 = Math.sqrt(ax * ax + ay * ay);\n        const mag2 = Math.sqrt(bx * bx + by * by);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot$3(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract$3(a, b, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = a[0] - b[0];\n        dst[1] = a[1] - b[1];\n        return dst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub$3 = subtract$3;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately$5(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals$5(a, b) {\n        return a[0] === b[0] && a[1] === b[1];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp$3(a, b, t, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = a[0] + t * (b[0] - a[0]);\n        dst[1] = a[1] + t * (b[1] - a[1]);\n        return dst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV$2(a, b, t, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = a[0] + t[0] * (b[0] - a[0]);\n        dst[1] = a[1] + t[1] * (b[1] - a[1]);\n        return dst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max$2(a, b, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = Math.max(a[0], b[0]);\n        dst[1] = Math.max(a[1], b[1]);\n        return dst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min$2(a, b, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = Math.min(a[0], b[0]);\n        dst[1] = Math.min(a[1], b[1]);\n        return dst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar$3(v, k, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = v[0] * k;\n        dst[1] = v[1] * k;\n        return dst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale$5 = mulScalar$3;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar$3(v, k, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = v[0] / k;\n        dst[1] = v[1] / k;\n        return dst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse$5(v, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = 1 / v[0];\n        dst[1] = 1 / v[1];\n        return dst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert$4 = inverse$5;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross$1(a, b, dst) {\n        dst = dst || new VecType$1(3);\n        const z = a[0] * b[1] - a[1] * b[0];\n        dst[0] = 0;\n        dst[1] = 0;\n        dst[2] = z;\n        return dst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot$3(a, b) {\n        return a[0] * b[0] + a[1] * b[1];\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length$3(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return Math.sqrt(v0 * v0 + v1 * v1);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len$3 = length$3;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq$3(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return v0 * v0 + v1 * v1;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq$3 = lengthSq$3;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance$2(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist$2 = distance$2;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq$2(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return dx * dx + dy * dy;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq$2 = distanceSq$2;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize$3(v, dst) {\n        dst = dst || new VecType$2(2);\n        const v0 = v[0];\n        const v1 = v[1];\n        const len = Math.sqrt(v0 * v0 + v1 * v1);\n        if (len > 0.00001) {\n            dst[0] = v0 / len;\n            dst[1] = v1 / len;\n        }\n        else {\n            dst[0] = 0;\n            dst[1] = 0;\n        }\n        return dst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate$4(v, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = -v[0];\n        dst[1] = -v[1];\n        return dst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec2.clone})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy$5(v, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = v[0];\n        dst[1] = v[1];\n        return dst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec2.copy})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone$5 = copy$5;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply$5(a, b, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = a[0] * b[0];\n        dst[1] = a[1] * b[1];\n        return dst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul$5 = multiply$5;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide$2(a, b, dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = a[0] / b[0];\n        dst[1] = a[1] / b[1];\n        return dst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div$2 = divide$2;\n    /**\n     * Creates a random unit vector * scale\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random$1(scale = 1, dst) {\n        dst = dst || new VecType$2(2);\n        const angle = Math.random() * 2 * Math.PI;\n        dst[0] = Math.cos(angle) * scale;\n        dst[1] = Math.sin(angle) * scale;\n        return dst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero$2(dst) {\n        dst = dst || new VecType$2(2);\n        dst[0] = 0;\n        dst[1] = 0;\n        return dst;\n    }\n    /**\n     * transform Vec2 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4$2(v, m, dst) {\n        dst = dst || new VecType$2(2);\n        const x = v[0];\n        const y = v[1];\n        dst[0] = x * m[0] + y * m[4] + m[12];\n        dst[1] = x * m[1] + y * m[5] + m[13];\n        return dst;\n    }\n    /**\n     * Transforms vec4 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3$1(v, m, dst) {\n        dst = dst || new VecType$2(2);\n        const x = v[0];\n        const y = v[1];\n        dst[0] = m[0] * x + m[4] * y + m[8];\n        dst[1] = m[1] * x + m[5] * y + m[9];\n        return dst;\n    }\n    /**\n     * Rotate a 2D vector\n     *\n     * @param a The vec2 point to rotate\n     * @param b The origin of the rotation\n     * @param rad The angle of rotation in radians\n     * @returns the rotated vector\n     */\n    function rotate$2(a, b, rad, dst) {\n        dst = dst || new VecType$2(2);\n        // Translate point to the origin\n        const p0 = a[0] - b[0];\n        const p1 = a[1] - b[1];\n        const sinC = Math.sin(rad);\n        const cosC = Math.cos(rad);\n        //perform rotation and translate to correct position\n        dst[0] = p0 * cosC - p1 * sinC + b[0];\n        dst[1] = p0 * sinC + p1 * cosC + b[1];\n        return dst;\n    }\n    /**\n     * Treat a 2D vector as a direction and set it's length\n     *\n     * @param a The vec2 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength$2(a, len, dst) {\n        dst = dst || new VecType$2(2);\n        normalize$3(a, dst);\n        return mulScalar$3(dst, len, dst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec2 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate$2(a, maxLen, dst) {\n        dst = dst || new VecType$2(2);\n        if (length$3(a) > maxLen) {\n            return setLength$2(a, maxLen, dst);\n        }\n        return copy$5(a, dst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint$2(a, b, dst) {\n        dst = dst || new VecType$2(2);\n        return lerp$3(a, b, 0.5, dst);\n    }\n\n    var vec2Impl = {\n        __proto__: null,\n        add: add$3,\n        addScaled: addScaled$2,\n        angle: angle$2,\n        ceil: ceil$2,\n        clamp: clamp$2,\n        clone: clone$5,\n        copy: copy$5,\n        create: create$5,\n        cross: cross$1,\n        dist: dist$2,\n        distSq: distSq$2,\n        distance: distance$2,\n        distanceSq: distanceSq$2,\n        div: div$2,\n        divScalar: divScalar$3,\n        divide: divide$2,\n        dot: dot$3,\n        equals: equals$5,\n        equalsApproximately: equalsApproximately$5,\n        floor: floor$2,\n        fromValues: fromValues$3,\n        inverse: inverse$5,\n        invert: invert$4,\n        len: len$3,\n        lenSq: lenSq$3,\n        length: length$3,\n        lengthSq: lengthSq$3,\n        lerp: lerp$3,\n        lerpV: lerpV$2,\n        max: max$2,\n        midpoint: midpoint$2,\n        min: min$2,\n        mul: mul$5,\n        mulScalar: mulScalar$3,\n        multiply: multiply$5,\n        negate: negate$4,\n        normalize: normalize$3,\n        random: random$1,\n        rotate: rotate$2,\n        round: round$2,\n        scale: scale$5,\n        set: set$5,\n        setDefaultType: setDefaultType$6,\n        setLength: setLength$2,\n        sub: sub$3,\n        subtract: subtract$3,\n        transformMat3: transformMat3$1,\n        transformMat4: transformMat4$2,\n        truncate: truncate$2,\n        zero: zero$2\n    };\n\n    /*\n     * Copyright 2022 Gregg Tavares\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a\n     * copy of this software and associated documentation files (the \"Software\"),\n     * to deal in the Software without restriction, including without limitation\n     * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     * and/or sell copies of the Software, and to permit persons to whom the\n     * Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n     * DEALINGS IN THE SOFTWARE.\n     */\n    /**\n     * 3x3 Matrix math math functions.\n     *\n     * Almost all functions take an optional `dst` argument. If it is not passed in the\n     * functions will create a new matrix. In other words you can do this\n     *\n     *     const mat = mat3.translation([1, 2, 3]);  // Creates a new translation matrix\n     *\n     * or\n     *\n     *     const mat = mat3.create();\n     *     mat3.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always save to pass any matrix as the destination. So for example\n     *\n     *     const mat = mat3.identity();\n     *     const trans = mat3.translation([1, 2, 3]);\n     *     mat3.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n     *\n     */\n    let MatType$1 = Float32Array;\n    // This mess is because with Mat3 we have 3 unused elements.\n    // For Float32Array and Float64Array that's not an issue\n    // but for Array it's troublesome\n    const ctorMap = new Map([\n        [Float32Array, () => new Float32Array(12)],\n        [Float64Array, () => new Float64Array(12)],\n        [Array, () => new Array(12).fill(0)],\n    ]);\n    let newMat3 = ctorMap.get(Float32Array);\n    /**\n     * Sets the type this library creates for a Mat3\n     * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n     * @returns previous constructor for Mat3\n     */\n    function setDefaultType$4(ctor) {\n        const oldType = MatType$1;\n        MatType$1 = ctor;\n        newMat3 = ctorMap.get(ctor);\n        return oldType;\n    }\n    /**\n     * Create a Mat3 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat3's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat3.clone(someJSArray);\n     * ```\n     *\n     * Note: a consequence of the implementation is if your Mat3Type = `Array`\n     * instead of `Float32Array` or `Float64Array` then any values you\n     * don't pass in will be undefined. Usually this is not an issue since\n     * (a) using `Array` is rare and (b) using `mat3.create` is usually used\n     * to create a Mat3 to be filled out as in\n     *\n     * ```\n     * const m = mat3.create();\n     * mat3.perspective(fov, aspect, near, far, m);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @returns matrix created from values.\n     */\n    function create$3(v0, v1, v2, v3, v4, v5, v6, v7, v8) {\n        const dst = newMat3();\n        // to make the array homogenous\n        dst[3] = 0;\n        dst[7] = 0;\n        dst[11] = 0;\n        if (v0 !== undefined) {\n            dst[0] = v0;\n            if (v1 !== undefined) {\n                dst[1] = v1;\n                if (v2 !== undefined) {\n                    dst[2] = v2;\n                    if (v3 !== undefined) {\n                        dst[4] = v3;\n                        if (v4 !== undefined) {\n                            dst[5] = v4;\n                            if (v5 !== undefined) {\n                                dst[6] = v5;\n                                if (v6 !== undefined) {\n                                    dst[8] = v6;\n                                    if (v7 !== undefined) {\n                                        dst[9] = v7;\n                                        if (v8 !== undefined) {\n                                            dst[10] = v8;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dst;\n    }\n    /**\n     * Sets the values of a Mat3\n     * Also see {@link mat3.create} and {@link mat3.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 set from values.\n     */\n    function set$4(v0, v1, v2, v3, v4, v5, v6, v7, v8, dst) {\n        dst = dst || newMat3();\n        dst[0] = v0;\n        dst[1] = v1;\n        dst[2] = v2;\n        dst[3] = 0;\n        dst[4] = v3;\n        dst[5] = v4;\n        dst[6] = v5;\n        dst[7] = 0;\n        dst[8] = v6;\n        dst[9] = v7;\n        dst[10] = v8;\n        dst[11] = 0;\n        return dst;\n    }\n    /**\n     * Creates a Mat3 from the upper left 3x3 part of a Mat4\n     * @param m4 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from m4\n     */\n    function fromMat4(m4, dst) {\n        dst = dst || newMat3();\n        dst[0] = m4[0];\n        dst[1] = m4[1];\n        dst[2] = m4[2];\n        dst[3] = 0;\n        dst[4] = m4[4];\n        dst[5] = m4[5];\n        dst[6] = m4[6];\n        dst[7] = 0;\n        dst[8] = m4[8];\n        dst[9] = m4[9];\n        dst[10] = m4[10];\n        dst[11] = 0;\n        return dst;\n    }\n    /**\n     * Creates a Mat3 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from q\n     */\n    function fromQuat$1(q, dst) {\n        dst = dst || newMat3();\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        dst[0] = 1 - yy - zz;\n        dst[1] = yx + wz;\n        dst[2] = zx - wy;\n        dst[3] = 0;\n        dst[4] = yx - wz;\n        dst[5] = 1 - xx - zz;\n        dst[6] = zy + wx;\n        dst[7] = 0;\n        dst[8] = zx + wy;\n        dst[9] = zy - wx;\n        dst[10] = 1 - xx - yy;\n        dst[11] = 0;\n        return dst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate$3(m, dst) {\n        dst = dst || newMat3();\n        dst[0] = -m[0];\n        dst[1] = -m[1];\n        dst[2] = -m[2];\n        dst[4] = -m[4];\n        dst[5] = -m[5];\n        dst[6] = -m[6];\n        dst[8] = -m[8];\n        dst[9] = -m[9];\n        dst[10] = -m[10];\n        return dst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat3.clone})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy$4(m, dst) {\n        dst = dst || newMat3();\n        dst[0] = m[0];\n        dst[1] = m[1];\n        dst[2] = m[2];\n        dst[4] = m[4];\n        dst[5] = m[5];\n        dst[6] = m[6];\n        dst[8] = m[8];\n        dst[9] = m[9];\n        dst[10] = m[10];\n        return dst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat3.copy})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone$4 = copy$4;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately$4(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals$4(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10];\n    }\n    /**\n     * Creates a 3-by-3 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 3-by-3 identity matrix.\n     */\n    function identity$2(dst) {\n        dst = dst || newMat3();\n        dst[0] = 1;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[4] = 0;\n        dst[5] = 1;\n        dst[6] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[10] = 1;\n        return dst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose$1(m, dst) {\n        dst = dst || newMat3();\n        if (dst === m) {\n            let t;\n            // 0 1 2\n            // 4 5 6\n            // 8 9 10\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            return dst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        dst[0] = m00;\n        dst[1] = m10;\n        dst[2] = m20;\n        dst[4] = m01;\n        dst[5] = m11;\n        dst[6] = m21;\n        dst[8] = m02;\n        dst[9] = m12;\n        dst[10] = m22;\n        return dst;\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse$4(m, dst) {\n        dst = dst || newMat3();\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const b01 = m22 * m11 - m12 * m21;\n        const b11 = -m22 * m10 + m12 * m20;\n        const b21 = m21 * m10 - m11 * m20;\n        const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n        dst[0] = b01 * invDet;\n        dst[1] = (-m22 * m01 + m02 * m21) * invDet;\n        dst[2] = (m12 * m01 - m02 * m11) * invDet;\n        dst[4] = b11 * invDet;\n        dst[5] = (m22 * m00 - m02 * m20) * invDet;\n        dst[6] = (-m12 * m00 + m02 * m10) * invDet;\n        dst[8] = b21 * invDet;\n        dst[9] = (-m21 * m00 + m01 * m20) * invDet;\n        dst[10] = (m11 * m00 - m01 * m10) * invDet;\n        return dst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant$1(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        return m00 * (m11 * m22 - m21 * m12) -\n            m10 * (m01 * m22 - m21 * m02) +\n            m20 * (m01 * m12 - m11 * m02);\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert$3 = inverse$4;\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply$4(a, b, dst) {\n        dst = dst || newMat3();\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        dst[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        dst[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        dst[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        dst[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        dst[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        dst[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        dst[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        dst[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        dst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        return dst;\n    }\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul$4 = multiply$4;\n    /**\n     * Sets the translation component of a 3-by-3 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation$1(a, v, dst) {\n        dst = dst || identity$2();\n        if (a !== dst) {\n            dst[0] = a[0];\n            dst[1] = a[1];\n            dst[2] = a[2];\n            dst[4] = a[4];\n            dst[5] = a[5];\n            dst[6] = a[6];\n        }\n        dst[8] = v[0];\n        dst[9] = v[1];\n        dst[10] = 1;\n        return dst;\n    }\n    /**\n     * Returns the translation component of a 3-by-3 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation$2(m, dst) {\n        dst = dst || create$5();\n        dst[0] = m[8];\n        dst[1] = m[9];\n        return dst;\n    }\n    /**\n     * Returns an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y,\n     * @returns The axis component of m.\n     */\n    function getAxis$2(m, axis, dst) {\n        dst = dst || create$5();\n        const off = axis * 4;\n        dst[0] = m[off + 0];\n        dst[1] = m[off + 1];\n        return dst;\n    }\n    /**\n     * Sets an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis$1(m, v, axis, dst) {\n        if (dst !== m) {\n            dst = copy$4(m, dst);\n        }\n        const off = axis * 4;\n        dst[off + 0] = v[0];\n        dst[off + 1] = v[1];\n        return dst;\n    }\n    /**\n     * Returns the scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling$2(m, dst) {\n        dst = dst || create$5();\n        const xx = m[0];\n        const xy = m[1];\n        const yx = m[4];\n        const yy = m[5];\n        dst[0] = Math.sqrt(xx * xx + xy * xy);\n        dst[1] = Math.sqrt(yx * yx + yy * yy);\n        return dst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which translates by the given vector v.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation$1(v, dst) {\n        dst = dst || newMat3();\n        dst[0] = 1;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[4] = 0;\n        dst[5] = 1;\n        dst[6] = 0;\n        dst[8] = v[0];\n        dst[9] = v[1];\n        dst[10] = 1;\n        return dst;\n    }\n    /**\n     * Translates the given 3-by-3 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate$1(m, v, dst) {\n        dst = dst || newMat3();\n        const v0 = v[0];\n        const v1 = v[1];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        if (m !== dst) {\n            dst[0] = m00;\n            dst[1] = m01;\n            dst[2] = m02;\n            dst[4] = m10;\n            dst[5] = m11;\n            dst[6] = m12;\n        }\n        dst[8] = m00 * v0 + m10 * v1 + m20;\n        dst[9] = m01 * v0 + m11 * v1 + m21;\n        dst[10] = m02 * v0 + m12 * v1 + m22;\n        return dst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates  by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotation$1(angleInRadians, dst) {\n        dst = dst || newMat3();\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        dst[0] = c;\n        dst[1] = s;\n        dst[2] = 0;\n        dst[4] = -s;\n        dst[5] = c;\n        dst[6] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[10] = 1;\n        return dst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix  by the given angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotate$1(m, angleInRadians, dst) {\n        dst = dst || newMat3();\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        dst[0] = c * m00 + s * m10;\n        dst[1] = c * m01 + s * m11;\n        dst[2] = c * m02 + s * m12;\n        dst[4] = c * m10 - s * m00;\n        dst[5] = c * m11 - s * m01;\n        dst[6] = c * m12 - s * m02;\n        if (m !== dst) {\n            dst[8] = m[8];\n            dst[9] = m[9];\n            dst[10] = m[10];\n        }\n        return dst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     2 entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling$1(v, dst) {\n        dst = dst || newMat3();\n        dst[0] = v[0];\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[4] = 0;\n        dst[5] = v[1];\n        dst[6] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[10] = 1;\n        return dst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of 2 entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale$4(m, v, dst) {\n        dst = dst || newMat3();\n        const v0 = v[0];\n        const v1 = v[1];\n        dst[0] = v0 * m[0 * 4 + 0];\n        dst[1] = v0 * m[0 * 4 + 1];\n        dst[2] = v0 * m[0 * 4 + 2];\n        dst[4] = v1 * m[1 * 4 + 0];\n        dst[5] = v1 * m[1 * 4 + 1];\n        dst[6] = v1 * m[1 * 4 + 2];\n        if (m !== dst) {\n            dst[8] = m[8];\n            dst[9] = m[9];\n            dst[10] = m[10];\n        }\n        return dst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales uniformly in each dimension\n     * @param s - Amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling$1(s, dst) {\n        dst = dst || newMat3();\n        dst[0] = s;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[4] = 0;\n        dst[5] = s;\n        dst[6] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[10] = 1;\n        return dst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given.\n     * @param m - The matrix to be modified.\n     * @param s - Amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale$1(m, s, dst) {\n        dst = dst || newMat3();\n        dst[0] = s * m[0 * 4 + 0];\n        dst[1] = s * m[0 * 4 + 1];\n        dst[2] = s * m[0 * 4 + 2];\n        dst[4] = s * m[1 * 4 + 0];\n        dst[5] = s * m[1 * 4 + 1];\n        dst[6] = s * m[1 * 4 + 2];\n        if (m !== dst) {\n            dst[8] = m[8];\n            dst[9] = m[9];\n            dst[10] = m[10];\n        }\n        return dst;\n    }\n\n    var mat3Impl = {\n        __proto__: null,\n        clone: clone$4,\n        copy: copy$4,\n        create: create$3,\n        determinant: determinant$1,\n        equals: equals$4,\n        equalsApproximately: equalsApproximately$4,\n        fromMat4: fromMat4,\n        fromQuat: fromQuat$1,\n        getAxis: getAxis$2,\n        getScaling: getScaling$2,\n        getTranslation: getTranslation$2,\n        identity: identity$2,\n        inverse: inverse$4,\n        invert: invert$3,\n        mul: mul$4,\n        multiply: multiply$4,\n        negate: negate$3,\n        rotate: rotate$1,\n        rotation: rotation$1,\n        scale: scale$4,\n        scaling: scaling$1,\n        set: set$4,\n        setAxis: setAxis$1,\n        setDefaultType: setDefaultType$4,\n        setTranslation: setTranslation$1,\n        translate: translate$1,\n        translation: translation$1,\n        transpose: transpose$1,\n        uniformScale: uniformScale$1,\n        uniformScaling: uniformScaling$1\n    };\n\n    /*\n     * Copyright 2022 Gregg Tavares\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a\n     * copy of this software and associated documentation files (the \"Software\"),\n     * to deal in the Software without restriction, including without limitation\n     * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     * and/or sell copies of the Software, and to permit persons to whom the\n     * Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n     * DEALINGS IN THE SOFTWARE.\n     */\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    const fromValues$2 = create$4;\n    /**\n     * Sets the values of a Vec3\n     * Also see {@link vec3.create} and {@link vec3.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set$3(x, y, z, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = x;\n        dst[1] = y;\n        dst[2] = z;\n        return dst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil$1(v, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = Math.ceil(v[0]);\n        dst[1] = Math.ceil(v[1]);\n        dst[2] = Math.ceil(v[2]);\n        return dst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor$1(v, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = Math.floor(v[0]);\n        dst[1] = Math.floor(v[1]);\n        dst[2] = Math.floor(v[2]);\n        return dst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round$1(v, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = Math.round(v[0]);\n        dst[1] = Math.round(v[1]);\n        dst[2] = Math.round(v[2]);\n        return dst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp$1(v, min = 0, max = 1, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = Math.min(max, Math.max(min, v[0]));\n        dst[1] = Math.min(max, Math.max(min, v[1]));\n        dst[2] = Math.min(max, Math.max(min, v[2]));\n        return dst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add$2(a, b, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = a[0] + b[0];\n        dst[1] = a[1] + b[1];\n        dst[2] = a[2] + b[2];\n        return dst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled$1(a, b, scale, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = a[0] + b[0] * scale;\n        dst[1] = a[1] + b[1] * scale;\n        dst[2] = a[2] + b[2] * scale;\n        return dst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle$1(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n        const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot$2(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract$2(a, b, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = a[0] - b[0];\n        dst[1] = a[1] - b[1];\n        dst[2] = a[2] - b[2];\n        return dst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub$2 = subtract$2;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately$3(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals$3(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp$2(a, b, t, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = a[0] + t * (b[0] - a[0]);\n        dst[1] = a[1] + t * (b[1] - a[1]);\n        dst[2] = a[2] + t * (b[2] - a[2]);\n        return dst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV$1(a, b, t, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = a[0] + t[0] * (b[0] - a[0]);\n        dst[1] = a[1] + t[1] * (b[1] - a[1]);\n        dst[2] = a[2] + t[2] * (b[2] - a[2]);\n        return dst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max$1(a, b, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = Math.max(a[0], b[0]);\n        dst[1] = Math.max(a[1], b[1]);\n        dst[2] = Math.max(a[2], b[2]);\n        return dst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min$1(a, b, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = Math.min(a[0], b[0]);\n        dst[1] = Math.min(a[1], b[1]);\n        dst[2] = Math.min(a[2], b[2]);\n        return dst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar$2(v, k, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = v[0] * k;\n        dst[1] = v[1] * k;\n        dst[2] = v[2] * k;\n        return dst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale$3 = mulScalar$2;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar$2(v, k, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = v[0] / k;\n        dst[1] = v[1] / k;\n        dst[2] = v[2] / k;\n        return dst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse$3(v, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = 1 / v[0];\n        dst[1] = 1 / v[1];\n        dst[2] = 1 / v[2];\n        return dst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert$2 = inverse$3;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        dst = dst || new VecType$1(3);\n        const t1 = a[2] * b[0] - a[0] * b[2];\n        const t2 = a[0] * b[1] - a[1] * b[0];\n        dst[0] = a[1] * b[2] - a[2] * b[1];\n        dst[1] = t1;\n        dst[2] = t2;\n        return dst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot$2(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length$2(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len$2 = length$2;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq$2(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return v0 * v0 + v1 * v1 + v2 * v2;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq$2 = lengthSq$2;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance$1(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist$1 = distance$1;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq$1(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return dx * dx + dy * dy + dz * dz;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq$1 = distanceSq$1;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize$2(v, dst) {\n        dst = dst || new VecType$1(3);\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n        if (len > 0.00001) {\n            dst[0] = v0 / len;\n            dst[1] = v1 / len;\n            dst[2] = v2 / len;\n        }\n        else {\n            dst[0] = 0;\n            dst[1] = 0;\n            dst[2] = 0;\n        }\n        return dst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate$2(v, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = -v[0];\n        dst[1] = -v[1];\n        dst[2] = -v[2];\n        return dst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec3.clone})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy$3(v, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = v[0];\n        dst[1] = v[1];\n        dst[2] = v[2];\n        return dst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec3.copy})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone$3 = copy$3;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply$3(a, b, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = a[0] * b[0];\n        dst[1] = a[1] * b[1];\n        dst[2] = a[2] * b[2];\n        return dst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul$3 = multiply$3;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide$1(a, b, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = a[0] / b[0];\n        dst[1] = a[1] / b[1];\n        dst[2] = a[2] / b[2];\n        return dst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div$1 = divide$1;\n    /**\n     * Creates a random vector\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        dst = dst || new VecType$1(3);\n        const angle = Math.random() * 2 * Math.PI;\n        const z = Math.random() * 2 - 1;\n        const zScale = Math.sqrt(1 - z * z) * scale;\n        dst[0] = Math.cos(angle) * zScale;\n        dst[1] = Math.sin(angle) * zScale;\n        dst[2] = z * scale;\n        return dst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero$1(dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = 0;\n        dst[1] = 0;\n        dst[2] = 0;\n        return dst;\n    }\n    /**\n     * transform vec3 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4$1(v, m, dst) {\n        dst = dst || new VecType$1(3);\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n        dst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n        dst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n        dst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n        return dst;\n    }\n    /**\n     * Transform vec4 by upper 3x3 matrix inside 4x4 matrix.\n     * @param v - The direction.\n     * @param m - The matrix.\n     * @param dst - optional Vec3 to store result. If not passed a new one is created.\n     * @returns The transformed vector.\n     */\n    function transformMat4Upper3x3(v, m, dst) {\n        dst = dst || new VecType$1(3);\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n        dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n        dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n        return dst;\n    }\n    /**\n     * Transforms vec3 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        dst = dst || new VecType$1(3);\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        dst[0] = x * m[0] + y * m[4] + z * m[8];\n        dst[1] = x * m[1] + y * m[5] + z * m[9];\n        dst[2] = x * m[2] + y * m[6] + z * m[10];\n        return dst;\n    }\n    /**\n     * Transforms vec3 by Quaternion\n     * @param v - the vector to transform\n     * @param q - the quaternion to transform by\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed\n     */\n    function transformQuat(v, q, dst) {\n        dst = dst || new VecType$1(3);\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const w2 = q[3] * 2;\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const uvX = qy * z - qz * y;\n        const uvY = qz * x - qx * z;\n        const uvZ = qx * y - qy * x;\n        dst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n        dst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n        dst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n        return dst;\n    }\n    /**\n     * Returns the translation component of a 4-by-4 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation$1(m, dst) {\n        dst = dst || new VecType$1(3);\n        dst[0] = m[12];\n        dst[1] = m[13];\n        dst[2] = m[14];\n        return dst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis$1(m, axis, dst) {\n        dst = dst || new VecType$1(3);\n        const off = axis * 4;\n        dst[0] = m[off + 0];\n        dst[1] = m[off + 1];\n        dst[2] = m[off + 2];\n        return dst;\n    }\n    /**\n     * Returns the scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling$1(m, dst) {\n        dst = dst || new VecType$1(3);\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        dst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        dst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        dst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return dst;\n    }\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateX$2(a, b, rad, dst) {\n        dst = dst || new VecType$1(3);\n        const p = [];\n        const r = [];\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n        r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n        //translate to correct position\n        dst[0] = r[0] + b[0];\n        dst[1] = r[1] + b[1];\n        dst[2] = r[2] + b[2];\n        return dst;\n    }\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateY$2(a, b, rad, dst) {\n        dst = dst || new VecType$1(3);\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n        // translate to correct position\n        dst[0] = r[0] + b[0];\n        dst[1] = r[1] + b[1];\n        dst[2] = r[2] + b[2];\n        return dst;\n    }\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns {vec3} out\n     */\n    function rotateZ$2(a, b, rad, dst) {\n        dst = dst || new VecType$1(3);\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n        r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n        r[2] = p[2];\n        // translate to correct position\n        dst[0] = r[0] + b[0];\n        dst[1] = r[1] + b[1];\n        dst[2] = r[2] + b[2];\n        return dst;\n    }\n    /**\n     * Treat a 3D vector as a direction and set it's length\n     *\n     * @param a The vec3 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength$1(a, len, dst) {\n        dst = dst || new VecType$1(3);\n        normalize$2(a, dst);\n        return mulScalar$2(dst, len, dst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec3 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate$1(a, maxLen, dst) {\n        dst = dst || new VecType$1(3);\n        if (length$2(a) > maxLen) {\n            return setLength$1(a, maxLen, dst);\n        }\n        return copy$3(a, dst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint$1(a, b, dst) {\n        dst = dst || new VecType$1(3);\n        return lerp$2(a, b, 0.5, dst);\n    }\n\n    var vec3Impl = {\n        __proto__: null,\n        add: add$2,\n        addScaled: addScaled$1,\n        angle: angle$1,\n        ceil: ceil$1,\n        clamp: clamp$1,\n        clone: clone$3,\n        copy: copy$3,\n        create: create$4,\n        cross: cross,\n        dist: dist$1,\n        distSq: distSq$1,\n        distance: distance$1,\n        distanceSq: distanceSq$1,\n        div: div$1,\n        divScalar: divScalar$2,\n        divide: divide$1,\n        dot: dot$2,\n        equals: equals$3,\n        equalsApproximately: equalsApproximately$3,\n        floor: floor$1,\n        fromValues: fromValues$2,\n        getAxis: getAxis$1,\n        getScaling: getScaling$1,\n        getTranslation: getTranslation$1,\n        inverse: inverse$3,\n        invert: invert$2,\n        len: len$2,\n        lenSq: lenSq$2,\n        length: length$2,\n        lengthSq: lengthSq$2,\n        lerp: lerp$2,\n        lerpV: lerpV$1,\n        max: max$1,\n        midpoint: midpoint$1,\n        min: min$1,\n        mul: mul$3,\n        mulScalar: mulScalar$2,\n        multiply: multiply$3,\n        negate: negate$2,\n        normalize: normalize$2,\n        random: random,\n        rotateX: rotateX$2,\n        rotateY: rotateY$2,\n        rotateZ: rotateZ$2,\n        round: round$1,\n        scale: scale$3,\n        set: set$3,\n        setDefaultType: setDefaultType$5,\n        setLength: setLength$1,\n        sub: sub$2,\n        subtract: subtract$2,\n        transformMat3: transformMat3,\n        transformMat4: transformMat4$1,\n        transformMat4Upper3x3: transformMat4Upper3x3,\n        transformQuat: transformQuat,\n        truncate: truncate$1,\n        zero: zero$1\n    };\n\n    /**\n     * 4x4 Matrix math math functions.\n     *\n     * Almost all functions take an optional `dst` argument. If it is not passed in the\n     * functions will create a new matrix. In other words you can do this\n     *\n     *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n     *\n     * or\n     *\n     *     const mat = mat4.create();\n     *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always save to pass any matrix as the destination. So for example\n     *\n     *     const mat = mat4.identity();\n     *     const trans = mat4.translation([1, 2, 3]);\n     *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n     *\n     */\n    let MatType = Float32Array;\n    /**\n     * Sets the type this library creates for a Mat4\n     * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n     * @returns previous constructor for Mat4\n     */\n    function setDefaultType$3(ctor) {\n        const oldType = MatType;\n        MatType = ctor;\n        return oldType;\n    }\n    /**\n     * Create a Mat4 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat4's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat4.clone(someJSArray);\n     * ```\n     *\n     * Note: a consequence of the implementation is if your Mat4Type = `Array`\n     * instead of `Float32Array` or `Float64Array` then any values you\n     * don't pass in will be undefined. Usually this is not an issue since\n     * (a) using `Array` is rare and (b) using `mat4.create` is usually used\n     * to create a Mat4 to be filled out as in\n     *\n     * ```\n     * const m = mat4.create();\n     * mat4.perspective(fov, aspect, near, far, m);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @returns created from values.\n     */\n    function create$2(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n        const dst = new MatType(16);\n        if (v0 !== undefined) {\n            dst[0] = v0;\n            if (v1 !== undefined) {\n                dst[1] = v1;\n                if (v2 !== undefined) {\n                    dst[2] = v2;\n                    if (v3 !== undefined) {\n                        dst[3] = v3;\n                        if (v4 !== undefined) {\n                            dst[4] = v4;\n                            if (v5 !== undefined) {\n                                dst[5] = v5;\n                                if (v6 !== undefined) {\n                                    dst[6] = v6;\n                                    if (v7 !== undefined) {\n                                        dst[7] = v7;\n                                        if (v8 !== undefined) {\n                                            dst[8] = v8;\n                                            if (v9 !== undefined) {\n                                                dst[9] = v9;\n                                                if (v10 !== undefined) {\n                                                    dst[10] = v10;\n                                                    if (v11 !== undefined) {\n                                                        dst[11] = v11;\n                                                        if (v12 !== undefined) {\n                                                            dst[12] = v12;\n                                                            if (v13 !== undefined) {\n                                                                dst[13] = v13;\n                                                                if (v14 !== undefined) {\n                                                                    dst[14] = v14;\n                                                                    if (v15 !== undefined) {\n                                                                        dst[15] = v15;\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return dst;\n    }\n    /**\n     * Sets the values of a Mat4\n     * Also see {@link mat4.create} and {@link mat4.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 created from values.\n     */\n    function set$2(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, dst) {\n        dst = dst || new MatType(16);\n        dst[0] = v0;\n        dst[1] = v1;\n        dst[2] = v2;\n        dst[3] = v3;\n        dst[4] = v4;\n        dst[5] = v5;\n        dst[6] = v6;\n        dst[7] = v7;\n        dst[8] = v8;\n        dst[9] = v9;\n        dst[10] = v10;\n        dst[11] = v11;\n        dst[12] = v12;\n        dst[13] = v13;\n        dst[14] = v14;\n        dst[15] = v15;\n        return dst;\n    }\n    /**\n     * Creates a Mat4 from a Mat3\n     * @param m3 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from m3\n     */\n    function fromMat3(m3, dst) {\n        dst = dst || new MatType(16);\n        dst[0] = m3[0];\n        dst[1] = m3[1];\n        dst[2] = m3[2];\n        dst[3] = 0;\n        dst[4] = m3[4];\n        dst[5] = m3[5];\n        dst[6] = m3[6];\n        dst[7] = 0;\n        dst[8] = m3[8];\n        dst[9] = m3[9];\n        dst[10] = m3[10];\n        dst[11] = 0;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[14] = 0;\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Creates a Mat4 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from q\n     */\n    function fromQuat(q, dst) {\n        dst = dst || new MatType(16);\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        dst[0] = 1 - yy - zz;\n        dst[1] = yx + wz;\n        dst[2] = zx - wy;\n        dst[3] = 0;\n        dst[4] = yx - wz;\n        dst[5] = 1 - xx - zz;\n        dst[6] = zy + wx;\n        dst[7] = 0;\n        dst[8] = zx + wy;\n        dst[9] = zy - wx;\n        dst[10] = 1 - xx - yy;\n        dst[11] = 0;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[14] = 0;\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate$1(m, dst) {\n        dst = dst || new MatType(16);\n        dst[0] = -m[0];\n        dst[1] = -m[1];\n        dst[2] = -m[2];\n        dst[3] = -m[3];\n        dst[4] = -m[4];\n        dst[5] = -m[5];\n        dst[6] = -m[6];\n        dst[7] = -m[7];\n        dst[8] = -m[8];\n        dst[9] = -m[9];\n        dst[10] = -m[10];\n        dst[11] = -m[11];\n        dst[12] = -m[12];\n        dst[13] = -m[13];\n        dst[14] = -m[14];\n        dst[15] = -m[15];\n        return dst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat4.clone})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy$2(m, dst) {\n        dst = dst || new MatType(16);\n        dst[0] = m[0];\n        dst[1] = m[1];\n        dst[2] = m[2];\n        dst[3] = m[3];\n        dst[4] = m[4];\n        dst[5] = m[5];\n        dst[6] = m[6];\n        dst[7] = m[7];\n        dst[8] = m[8];\n        dst[9] = m[9];\n        dst[10] = m[10];\n        dst[11] = m[11];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n        return dst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat4.copy})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone$2 = copy$2;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately$2(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[7] - b[7]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON &&\n            Math.abs(a[11] - b[11]) < EPSILON &&\n            Math.abs(a[12] - b[12]) < EPSILON &&\n            Math.abs(a[13] - b[13]) < EPSILON &&\n            Math.abs(a[14] - b[14]) < EPSILON &&\n            Math.abs(a[15] - b[15]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals$2(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[3] === b[3] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[7] === b[7] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10] &&\n            a[11] === b[11] &&\n            a[12] === b[12] &&\n            a[13] === b[13] &&\n            a[14] === b[14] &&\n            a[15] === b[15];\n    }\n    /**\n     * Creates a 4-by-4 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 4-by-4 identity matrix.\n     */\n    function identity$1(dst) {\n        dst = dst || new MatType(16);\n        dst[0] = 1;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n        dst[4] = 0;\n        dst[5] = 1;\n        dst[6] = 0;\n        dst[7] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[10] = 1;\n        dst[11] = 0;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[14] = 0;\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        dst = dst || new MatType(16);\n        if (dst === m) {\n            let t;\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[3];\n            m[3] = m[12];\n            m[12] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            t = m[7];\n            m[7] = m[13];\n            m[13] = t;\n            t = m[11];\n            m[11] = m[14];\n            m[14] = t;\n            return dst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        dst[0] = m00;\n        dst[1] = m10;\n        dst[2] = m20;\n        dst[3] = m30;\n        dst[4] = m01;\n        dst[5] = m11;\n        dst[6] = m21;\n        dst[7] = m31;\n        dst[8] = m02;\n        dst[9] = m12;\n        dst[10] = m22;\n        dst[11] = m32;\n        dst[12] = m03;\n        dst[13] = m13;\n        dst[14] = m23;\n        dst[15] = m33;\n        return dst;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse$2(m, dst) {\n        dst = dst || new MatType(16);\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const tmp12 = m20 * m31;\n        const tmp13 = m30 * m21;\n        const tmp14 = m10 * m31;\n        const tmp15 = m30 * m11;\n        const tmp16 = m10 * m21;\n        const tmp17 = m20 * m11;\n        const tmp18 = m00 * m31;\n        const tmp19 = m30 * m01;\n        const tmp20 = m00 * m21;\n        const tmp21 = m20 * m01;\n        const tmp22 = m00 * m11;\n        const tmp23 = m10 * m01;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n        dst[0] = d * t0;\n        dst[1] = d * t1;\n        dst[2] = d * t2;\n        dst[3] = d * t3;\n        dst[4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n            (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n        dst[5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n            (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n        dst[6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n            (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n        dst[7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n            (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n        dst[8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n            (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n        dst[9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n            (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n        dst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n            (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n        dst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n            (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n        dst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n            (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n        dst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n            (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n        dst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n            (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n        dst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n            (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n        return dst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert$1 = inverse$2;\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply$2(a, b, dst) {\n        dst = dst || new MatType(16);\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a13 = a[4 + 3];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const a23 = a[8 + 3];\n        const a30 = a[12 + 0];\n        const a31 = a[12 + 1];\n        const a32 = a[12 + 2];\n        const a33 = a[12 + 3];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b13 = b[4 + 3];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        const b23 = b[8 + 3];\n        const b30 = b[12 + 0];\n        const b31 = b[12 + 1];\n        const b32 = b[12 + 2];\n        const b33 = b[12 + 3];\n        dst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n        dst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n        dst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n        dst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n        dst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n        dst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n        dst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n        dst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n        dst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n        dst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n        dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n        dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n        dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n        dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n        dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n        dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n        return dst;\n    }\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul$2 = multiply$2;\n    /**\n     * Sets the translation component of a 4-by-4 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        dst = dst || identity$1();\n        if (a !== dst) {\n            dst[0] = a[0];\n            dst[1] = a[1];\n            dst[2] = a[2];\n            dst[3] = a[3];\n            dst[4] = a[4];\n            dst[5] = a[5];\n            dst[6] = a[6];\n            dst[7] = a[7];\n            dst[8] = a[8];\n            dst[9] = a[9];\n            dst[10] = a[10];\n            dst[11] = a[11];\n        }\n        dst[12] = v[0];\n        dst[13] = v[1];\n        dst[14] = v[2];\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Returns the translation component of a 4-by-4 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        dst = dst || create$4();\n        dst[0] = m[12];\n        dst[1] = m[13];\n        dst[2] = m[14];\n        return dst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        dst = dst || create$4();\n        const off = axis * 4;\n        dst[0] = m[off + 0];\n        dst[1] = m[off + 1];\n        dst[2] = m[off + 2];\n        return dst;\n    }\n    /**\n     * Sets an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y, 2 = z;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        if (dst !== m) {\n            dst = copy$2(m, dst);\n        }\n        const off = axis * 4;\n        dst[off + 0] = v[0];\n        dst[off + 1] = v[1];\n        dst[off + 2] = v[2];\n        return dst;\n    }\n    /**\n     * Returns the scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        dst = dst || create$4();\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        dst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        dst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        dst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return dst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 0 to 1 in the z dimension.\n     *\n     * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n     * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n     * otherwise.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */\n    function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n        dst = dst || new MatType(16);\n        const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n        dst[0] = f / aspect;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n        dst[4] = 0;\n        dst[5] = f;\n        dst[6] = 0;\n        dst[7] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[11] = -1;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[15] = 0;\n        if (Number.isFinite(zFar)) {\n            const rangeInv = 1 / (zNear - zFar);\n            dst[10] = zFar * rangeInv;\n            dst[14] = zFar * zNear * rangeInv;\n        }\n        else {\n            dst[10] = -1;\n            dst[14] = -zNear;\n        }\n        return dst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane. (default = Infinity)\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */ function perspectiveReverseZ(fieldOfViewYInRadians, aspect, zNear, zFar = Infinity, dst) {\n        dst = dst || new MatType(16);\n        const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n        dst[0] = f / aspect;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n        dst[4] = 0;\n        dst[5] = f;\n        dst[6] = 0;\n        dst[7] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[11] = -1;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[15] = 0;\n        if (zFar === Infinity) {\n            dst[10] = 0;\n            dst[14] = zNear;\n        }\n        else {\n            const rangeInv = 1 / (zFar - zNear);\n            dst[10] = zNear * rangeInv;\n            dst[14] = zFar * zNear * rangeInv;\n        }\n        return dst;\n    }\n    /**\n     * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n     * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n     * and 0 to +1 in z.\n     * @param left - Left side of the near clipping plane viewport.\n     * @param right - Right side of the near clipping plane viewport.\n     * @param bottom - Bottom of the near clipping plane viewport.\n     * @param top - Top of the near clipping plane viewport.\n     * @param near - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param far - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The orthographic projection matrix.\n     */\n    function ortho(left, right, bottom, top, near, far, dst) {\n        dst = dst || new MatType(16);\n        dst[0] = 2 / (right - left);\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n        dst[4] = 0;\n        dst[5] = 2 / (top - bottom);\n        dst[6] = 0;\n        dst[7] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[10] = 1 / (near - far);\n        dst[11] = 0;\n        dst[12] = (right + left) / (left - right);\n        dst[13] = (top + bottom) / (bottom - top);\n        dst[14] = near / (near - far);\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustum(left, right, bottom, top, near, far, dst) {\n        dst = dst || new MatType(16);\n        const dx = (right - left);\n        const dy = (top - bottom);\n        const dz = (near - far);\n        dst[0] = 2 * near / dx;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n        dst[4] = 0;\n        dst[5] = 2 * near / dy;\n        dst[6] = 0;\n        dst[7] = 0;\n        dst[8] = (left + right) / dx;\n        dst[9] = (top + bottom) / dy;\n        dst[10] = far / dz;\n        dst[11] = -1;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[14] = near * far / dz;\n        dst[15] = 0;\n        return dst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustumReverseZ(left, right, bottom, top, near, far = Infinity, dst) {\n        dst = dst || new MatType(16);\n        const dx = (right - left);\n        const dy = (top - bottom);\n        dst[0] = 2 * near / dx;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n        dst[4] = 0;\n        dst[5] = 2 * near / dy;\n        dst[6] = 0;\n        dst[7] = 0;\n        dst[8] = (left + right) / dx;\n        dst[9] = (top + bottom) / dy;\n        dst[11] = -1;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[15] = 0;\n        if (far === Infinity) {\n            dst[10] = 0;\n            dst[14] = near;\n        }\n        else {\n            const rangeInv = 1 / (far - near);\n            dst[10] = near * rangeInv;\n            dst[14] = far * near * rangeInv;\n        }\n        return dst;\n    }\n    let xAxis;\n    let yAxis;\n    let zAxis;\n    /**\n     * Computes a 4-by-4 aim transformation.\n     *\n     * This is a matrix which positions an object aiming down positive Z.\n     * toward the target.\n     *\n     * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n     *\n     * @param position - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function aim(position, target, up, dst) {\n        dst = dst || new MatType(16);\n        xAxis = xAxis || create$4();\n        yAxis = yAxis || create$4();\n        zAxis = zAxis || create$4();\n        normalize$2(subtract$2(target, position, zAxis), zAxis);\n        normalize$2(cross(up, zAxis, xAxis), xAxis);\n        normalize$2(cross(zAxis, xAxis, yAxis), yAxis);\n        dst[0] = xAxis[0];\n        dst[1] = xAxis[1];\n        dst[2] = xAxis[2];\n        dst[3] = 0;\n        dst[4] = yAxis[0];\n        dst[5] = yAxis[1];\n        dst[6] = yAxis[2];\n        dst[7] = 0;\n        dst[8] = zAxis[0];\n        dst[9] = zAxis[1];\n        dst[10] = zAxis[2];\n        dst[11] = 0;\n        dst[12] = position[0];\n        dst[13] = position[1];\n        dst[14] = position[2];\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Computes a 4-by-4 camera aim transformation.\n     *\n     * This is a matrix which positions an object aiming down negative Z.\n     * toward the target.\n     *\n     * Note: this is the inverse of `lookAt`\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function cameraAim(eye, target, up, dst) {\n        dst = dst || new MatType(16);\n        xAxis = xAxis || create$4();\n        yAxis = yAxis || create$4();\n        zAxis = zAxis || create$4();\n        normalize$2(subtract$2(eye, target, zAxis), zAxis);\n        normalize$2(cross(up, zAxis, xAxis), xAxis);\n        normalize$2(cross(zAxis, xAxis, yAxis), yAxis);\n        dst[0] = xAxis[0];\n        dst[1] = xAxis[1];\n        dst[2] = xAxis[2];\n        dst[3] = 0;\n        dst[4] = yAxis[0];\n        dst[5] = yAxis[1];\n        dst[6] = yAxis[2];\n        dst[7] = 0;\n        dst[8] = zAxis[0];\n        dst[9] = zAxis[1];\n        dst[10] = zAxis[2];\n        dst[11] = 0;\n        dst[12] = eye[0];\n        dst[13] = eye[1];\n        dst[14] = eye[2];\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Computes a 4-by-4 view transformation.\n     *\n     * This is a view matrix which transforms all other objects\n     * to be in the space of the view defined by the parameters.\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The look-at matrix.\n     */\n    function lookAt(eye, target, up, dst) {\n        dst = dst || new MatType(16);\n        xAxis = xAxis || create$4();\n        yAxis = yAxis || create$4();\n        zAxis = zAxis || create$4();\n        normalize$2(subtract$2(eye, target, zAxis), zAxis);\n        normalize$2(cross(up, zAxis, xAxis), xAxis);\n        normalize$2(cross(zAxis, xAxis, yAxis), yAxis);\n        dst[0] = xAxis[0];\n        dst[1] = yAxis[0];\n        dst[2] = zAxis[0];\n        dst[3] = 0;\n        dst[4] = xAxis[1];\n        dst[5] = yAxis[1];\n        dst[6] = zAxis[1];\n        dst[7] = 0;\n        dst[8] = xAxis[2];\n        dst[9] = yAxis[2];\n        dst[10] = zAxis[2];\n        dst[11] = 0;\n        dst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n        dst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n        dst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which translates by the given vector v.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        dst = dst || new MatType(16);\n        dst[0] = 1;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n        dst[4] = 0;\n        dst[5] = 1;\n        dst[6] = 0;\n        dst[7] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[10] = 1;\n        dst[11] = 0;\n        dst[12] = v[0];\n        dst[13] = v[1];\n        dst[14] = v[2];\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Translates the given 4-by-4 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        dst = dst || new MatType(16);\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        if (m !== dst) {\n            dst[0] = m00;\n            dst[1] = m01;\n            dst[2] = m02;\n            dst[3] = m03;\n            dst[4] = m10;\n            dst[5] = m11;\n            dst[6] = m12;\n            dst[7] = m13;\n            dst[8] = m20;\n            dst[9] = m21;\n            dst[10] = m22;\n            dst[11] = m23;\n        }\n        dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n        dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n        dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n        dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n        return dst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationX(angleInRadians, dst) {\n        dst = dst || new MatType(16);\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        dst[0] = 1;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n        dst[4] = 0;\n        dst[5] = c;\n        dst[6] = s;\n        dst[7] = 0;\n        dst[8] = 0;\n        dst[9] = -s;\n        dst[10] = c;\n        dst[11] = 0;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[14] = 0;\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the x-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateX$1(m, angleInRadians, dst) {\n        dst = dst || new MatType(16);\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        dst[4] = c * m10 + s * m20;\n        dst[5] = c * m11 + s * m21;\n        dst[6] = c * m12 + s * m22;\n        dst[7] = c * m13 + s * m23;\n        dst[8] = c * m20 - s * m10;\n        dst[9] = c * m21 - s * m11;\n        dst[10] = c * m22 - s * m12;\n        dst[11] = c * m23 - s * m13;\n        if (m !== dst) {\n            dst[0] = m[0];\n            dst[1] = m[1];\n            dst[2] = m[2];\n            dst[3] = m[3];\n            dst[12] = m[12];\n            dst[13] = m[13];\n            dst[14] = m[14];\n            dst[15] = m[15];\n        }\n        return dst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationY(angleInRadians, dst) {\n        dst = dst || new MatType(16);\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        dst[0] = c;\n        dst[1] = 0;\n        dst[2] = -s;\n        dst[3] = 0;\n        dst[4] = 0;\n        dst[5] = 1;\n        dst[6] = 0;\n        dst[7] = 0;\n        dst[8] = s;\n        dst[9] = 0;\n        dst[10] = c;\n        dst[11] = 0;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[14] = 0;\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the y-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateY$1(m, angleInRadians, dst) {\n        dst = dst || new MatType(16);\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        dst[0] = c * m00 - s * m20;\n        dst[1] = c * m01 - s * m21;\n        dst[2] = c * m02 - s * m22;\n        dst[3] = c * m03 - s * m23;\n        dst[8] = c * m20 + s * m00;\n        dst[9] = c * m21 + s * m01;\n        dst[10] = c * m22 + s * m02;\n        dst[11] = c * m23 + s * m03;\n        if (m !== dst) {\n            dst[4] = m[4];\n            dst[5] = m[5];\n            dst[6] = m[6];\n            dst[7] = m[7];\n            dst[12] = m[12];\n            dst[13] = m[13];\n            dst[14] = m[14];\n            dst[15] = m[15];\n        }\n        return dst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationZ(angleInRadians, dst) {\n        dst = dst || new MatType(16);\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        dst[0] = c;\n        dst[1] = s;\n        dst[2] = 0;\n        dst[3] = 0;\n        dst[4] = -s;\n        dst[5] = c;\n        dst[6] = 0;\n        dst[7] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[10] = 1;\n        dst[11] = 0;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[14] = 0;\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the z-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateZ$1(m, angleInRadians, dst) {\n        dst = dst || new MatType(16);\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        dst[0] = c * m00 + s * m10;\n        dst[1] = c * m01 + s * m11;\n        dst[2] = c * m02 + s * m12;\n        dst[3] = c * m03 + s * m13;\n        dst[4] = c * m10 - s * m00;\n        dst[5] = c * m11 - s * m01;\n        dst[6] = c * m12 - s * m02;\n        dst[7] = c * m13 - s * m03;\n        if (m !== dst) {\n            dst[8] = m[8];\n            dst[9] = m[9];\n            dst[10] = m[10];\n            dst[11] = m[11];\n            dst[12] = m[12];\n            dst[13] = m[13];\n            dst[14] = m[14];\n            dst[15] = m[15];\n        }\n        return dst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    function axisRotation(axis, angleInRadians, dst) {\n        dst = dst || new MatType(16);\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        dst[0] = xx + (1 - xx) * c;\n        dst[1] = x * y * oneMinusCosine + z * s;\n        dst[2] = x * z * oneMinusCosine - y * s;\n        dst[3] = 0;\n        dst[4] = x * y * oneMinusCosine - z * s;\n        dst[5] = yy + (1 - yy) * c;\n        dst[6] = y * z * oneMinusCosine + x * s;\n        dst[7] = 0;\n        dst[8] = x * z * oneMinusCosine + y * s;\n        dst[9] = y * z * oneMinusCosine - x * s;\n        dst[10] = zz + (1 - zz) * c;\n        dst[11] = 0;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[14] = 0;\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle. (same as axisRotation)\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    const rotation = axisRotation;\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle.\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function axisRotate(m, axis, angleInRadians, dst) {\n        dst = dst || new MatType(16);\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        const r00 = xx + (1 - xx) * c;\n        const r01 = x * y * oneMinusCosine + z * s;\n        const r02 = x * z * oneMinusCosine - y * s;\n        const r10 = x * y * oneMinusCosine - z * s;\n        const r11 = yy + (1 - yy) * c;\n        const r12 = y * z * oneMinusCosine + x * s;\n        const r20 = x * z * oneMinusCosine + y * s;\n        const r21 = y * z * oneMinusCosine - x * s;\n        const r22 = zz + (1 - zz) * c;\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n        dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n        dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n        dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n        dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n        dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n        dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n        dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n        dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n        dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n        dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n        dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n        if (m !== dst) {\n            dst[12] = m[12];\n            dst[13] = m[13];\n            dst[14] = m[14];\n            dst[15] = m[15];\n        }\n        return dst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle. (same as rotate)\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    const rotate = axisRotate;\n    /**\n     * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     three entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        dst = dst || new MatType(16);\n        dst[0] = v[0];\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n        dst[4] = 0;\n        dst[5] = v[1];\n        dst[6] = 0;\n        dst[7] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[10] = v[2];\n        dst[11] = 0;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[14] = 0;\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of three entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale$2(m, v, dst) {\n        dst = dst || new MatType(16);\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        dst[0] = v0 * m[0 * 4 + 0];\n        dst[1] = v0 * m[0 * 4 + 1];\n        dst[2] = v0 * m[0 * 4 + 2];\n        dst[3] = v0 * m[0 * 4 + 3];\n        dst[4] = v1 * m[1 * 4 + 0];\n        dst[5] = v1 * m[1 * 4 + 1];\n        dst[6] = v1 * m[1 * 4 + 2];\n        dst[7] = v1 * m[1 * 4 + 3];\n        dst[8] = v2 * m[2 * 4 + 0];\n        dst[9] = v2 * m[2 * 4 + 1];\n        dst[10] = v2 * m[2 * 4 + 2];\n        dst[11] = v2 * m[2 * 4 + 3];\n        if (m !== dst) {\n            dst[12] = m[12];\n            dst[13] = m[13];\n            dst[14] = m[14];\n            dst[15] = m[15];\n        }\n        return dst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n     * @param s - the amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        dst = dst || new MatType(16);\n        dst[0] = s;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n        dst[4] = 0;\n        dst[5] = s;\n        dst[6] = 0;\n        dst[7] = 0;\n        dst[8] = 0;\n        dst[9] = 0;\n        dst[10] = s;\n        dst[11] = 0;\n        dst[12] = 0;\n        dst[13] = 0;\n        dst[14] = 0;\n        dst[15] = 1;\n        return dst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n     * @param m - The matrix to be modified.\n     * @param s - The amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        dst = dst || new MatType(16);\n        dst[0] = s * m[0 * 4 + 0];\n        dst[1] = s * m[0 * 4 + 1];\n        dst[2] = s * m[0 * 4 + 2];\n        dst[3] = s * m[0 * 4 + 3];\n        dst[4] = s * m[1 * 4 + 0];\n        dst[5] = s * m[1 * 4 + 1];\n        dst[6] = s * m[1 * 4 + 2];\n        dst[7] = s * m[1 * 4 + 3];\n        dst[8] = s * m[2 * 4 + 0];\n        dst[9] = s * m[2 * 4 + 1];\n        dst[10] = s * m[2 * 4 + 2];\n        dst[11] = s * m[2 * 4 + 3];\n        if (m !== dst) {\n            dst[12] = m[12];\n            dst[13] = m[13];\n            dst[14] = m[14];\n            dst[15] = m[15];\n        }\n        return dst;\n    }\n\n    var mat4Impl = {\n        __proto__: null,\n        aim: aim,\n        axisRotate: axisRotate,\n        axisRotation: axisRotation,\n        cameraAim: cameraAim,\n        clone: clone$2,\n        copy: copy$2,\n        create: create$2,\n        determinant: determinant,\n        equals: equals$2,\n        equalsApproximately: equalsApproximately$2,\n        fromMat3: fromMat3,\n        fromQuat: fromQuat,\n        frustum: frustum,\n        frustumReverseZ: frustumReverseZ,\n        getAxis: getAxis,\n        getScaling: getScaling,\n        getTranslation: getTranslation,\n        identity: identity$1,\n        inverse: inverse$2,\n        invert: invert$1,\n        lookAt: lookAt,\n        mul: mul$2,\n        multiply: multiply$2,\n        negate: negate$1,\n        ortho: ortho,\n        perspective: perspective,\n        perspectiveReverseZ: perspectiveReverseZ,\n        rotate: rotate,\n        rotateX: rotateX$1,\n        rotateY: rotateY$1,\n        rotateZ: rotateZ$1,\n        rotation: rotation,\n        rotationX: rotationX,\n        rotationY: rotationY,\n        rotationZ: rotationZ,\n        scale: scale$2,\n        scaling: scaling,\n        set: set$2,\n        setAxis: setAxis,\n        setDefaultType: setDefaultType$3,\n        setTranslation: setTranslation,\n        translate: translate,\n        translation: translation,\n        transpose: transpose,\n        uniformScale: uniformScale,\n        uniformScaling: uniformScaling\n    };\n\n    /*\n     * Copyright 2022 Gregg Tavares\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a\n     * copy of this software and associated documentation files (the \"Software\"),\n     * to deal in the Software without restriction, including without limitation\n     * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     * and/or sell copies of the Software, and to permit persons to whom the\n     * Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n     * DEALINGS IN THE SOFTWARE.\n     */\n    /**\n     *\n     * Quat4 math functions.\n     *\n     * Almost all functions take an optional `dst` argument. If it is not passed in the\n     * functions will create a new `Quat4`. In other words you can do this\n     *\n     *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n     *\n     * or\n     *\n     *     const v = quat4.create();\n     *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always safe to pass any vector as the destination. So for example\n     *\n     *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n     *\n     */\n    let QuatType = Float32Array;\n    /**\n     * Sets the type this library creates for a Quat4\n     * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n     * @returns previous constructor for Quat4\n     */\n    function setDefaultType$2(ctor) {\n        const oldType = QuatType;\n        QuatType = ctor;\n        return oldType;\n    }\n    /**\n     * Creates a quat4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create$1(x, y, z, w) {\n        const dst = new QuatType(4);\n        if (x !== undefined) {\n            dst[0] = x;\n            if (y !== undefined) {\n                dst[1] = y;\n                if (z !== undefined) {\n                    dst[2] = z;\n                    if (w !== undefined) {\n                        dst[3] = w;\n                    }\n                }\n            }\n        }\n        return dst;\n    }\n\n    /*\n     * Copyright 2022 Gregg Tavares\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a\n     * copy of this software and associated documentation files (the \"Software\"),\n     * to deal in the Software without restriction, including without limitation\n     * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     * and/or sell copies of the Software, and to permit persons to whom the\n     * Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n     * DEALINGS IN THE SOFTWARE.\n     */\n    /**\n     * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues$1 = create$1;\n    /**\n     * Sets the values of a Quat\n     * Also see {@link quat.create} and {@link quat.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set$1(x, y, z, w, dst) {\n        dst = dst || new QuatType(4);\n        dst[0] = x;\n        dst[1] = y;\n        dst[2] = z;\n        dst[3] = w;\n        return dst;\n    }\n    /**\n     * Sets a quaternion from the given angle and  axis,\n     * then returns it.\n     *\n     * @param axis - the axis to rotate around\n     * @param angleInRadians - the angle\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The quaternion that represents the given axis and angle\n     **/\n    function fromAxisAngle(axis, angleInRadians, dst) {\n        dst = dst || new QuatType(4);\n        const halfAngle = angleInRadians * 0.5;\n        const s = Math.sin(halfAngle);\n        dst[0] = s * axis[0];\n        dst[1] = s * axis[1];\n        dst[2] = s * axis[2];\n        dst[3] = Math.cos(halfAngle);\n        return dst;\n    }\n    /**\n     * Gets the rotation axis and angle\n     * @param q - quaternion to compute from\n     * @param dst - Vec3 to hold result. If not passed in a new one is created.\n     * @return angle and axis\n     */\n    function toAxisAngle(q, dst) {\n        dst = dst || create$4(4);\n        const angle = Math.acos(q[3]) * 2;\n        const s = Math.sin(angle * 0.5);\n        if (s > EPSILON) {\n            dst[0] = q[0] / s;\n            dst[1] = q[1] / s;\n            dst[2] = q[2] / s;\n        }\n        else {\n            dst[0] = 1;\n            dst[1] = 0;\n            dst[2] = 0;\n        }\n        return { angle, axis: dst };\n    }\n    /**\n     * Returns the angle in degrees between two rotations a and b.\n     * @param a - quaternion a\n     * @param b - quaternion b\n     * @return angle in radians between the two quaternions\n     */\n    function angle(a, b) {\n        const d = dot$1(a, b);\n        return Math.acos(2 * d * d - 1);\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function multiply$1(a, b, dst) {\n        dst = dst || new QuatType(4);\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const bw = b[3];\n        dst[0] = ax * bw + aw * bx + ay * bz - az * by;\n        dst[1] = ay * bw + aw * by + az * bx - ax * bz;\n        dst[2] = az * bw + aw * bz + ax * by - ay * bx;\n        dst[3] = aw * bw - ax * bx - ay * by - az * bz;\n        return dst;\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    const mul$1 = multiply$1;\n    /**\n     * Rotates the given quaternion around the X axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateX(q, angleInRadians, dst) {\n        dst = dst || new QuatType(4);\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bx = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        dst[0] = qx * bw + qw * bx;\n        dst[1] = qy * bw + qz * bx;\n        dst[2] = qz * bw - qy * bx;\n        dst[3] = qw * bw - qx * bx;\n        return dst;\n    }\n    /**\n     * Rotates the given quaternion around the Y axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateY(q, angleInRadians, dst) {\n        dst = dst || new QuatType(4);\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const by = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        dst[0] = qx * bw - qz * by;\n        dst[1] = qy * bw + qw * by;\n        dst[2] = qz * bw + qx * by;\n        dst[3] = qw * bw - qy * by;\n        return dst;\n    }\n    /**\n     * Rotates the given quaternion around the Z axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateZ(q, angleInRadians, dst) {\n        dst = dst || new QuatType(4);\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bz = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        dst[0] = qx * bw + qy * bz;\n        dst[1] = qy * bw - qx * bz;\n        dst[2] = qz * bw + qw * bz;\n        dst[3] = qw * bw - qz * bz;\n        return dst;\n    }\n    /**\n     * Spherically linear interpolate between two quaternions\n     *\n     * @param a - starting value\n     * @param b - ending value\n     * @param t - value where 0 = a and 1 = b\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function slerp(a, b, t, dst) {\n        dst = dst || new QuatType(4);\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        let bx = b[0];\n        let by = b[1];\n        let bz = b[2];\n        let bw = b[3];\n        let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n        if (cosOmega < 0) {\n            cosOmega = -cosOmega;\n            bx = -bx;\n            by = -by;\n            bz = -bz;\n            bw = -bw;\n        }\n        let scale0;\n        let scale1;\n        if (1.0 - cosOmega > EPSILON) {\n            const omega = Math.acos(cosOmega);\n            const sinOmega = Math.sin(omega);\n            scale0 = Math.sin((1 - t) * omega) / sinOmega;\n            scale1 = Math.sin(t * omega) / sinOmega;\n        }\n        else {\n            scale0 = 1.0 - t;\n            scale1 = t;\n        }\n        dst[0] = scale0 * ax + scale1 * bx;\n        dst[1] = scale0 * ay + scale1 * by;\n        dst[2] = scale0 * az + scale1 * bz;\n        dst[3] = scale0 * aw + scale1 * bw;\n        return dst;\n    }\n    /**\n     * Compute the inverse of a quaternion\n     *\n     * @param q - quaternion to compute the inverse of\n     * @returns A quaternion that is the result of a * b\n     */\n    function inverse$1(q, dst) {\n        dst = dst || new QuatType(4);\n        const a0 = q[0];\n        const a1 = q[1];\n        const a2 = q[2];\n        const a3 = q[3];\n        const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n        const invDot = dot ? 1 / dot : 0;\n        dst[0] = -a0 * invDot;\n        dst[1] = -a1 * invDot;\n        dst[2] = -a2 * invDot;\n        dst[3] = a3 * invDot;\n        return dst;\n    }\n    /**\n     * Compute the conjugate of a quaternion\n     * For quaternions with a magnitude of 1 (a unit quaternion)\n     * this returns the same as the inverse but is faster to calculate.\n     *\n     * @param q - quaternion to compute the conjugate of.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The conjugate of q\n     */\n    function conjugate(q, dst) {\n        dst = dst || new QuatType(4);\n        dst[0] = -q[0];\n        dst[1] = -q[1];\n        dst[2] = -q[2];\n        dst[3] = q[3];\n        return dst;\n    }\n    /**\n     * Creates a quaternion from the given rotation matrix.\n     *\n     * The created quaternion is not normalized.\n     *\n     * @param m - rotation matrix\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function fromMat(m, dst) {\n        dst = dst || new QuatType(4);\n        /*\n        0 1 2\n        3 4 5\n        6 7 8\n      \n        0 1 2\n        4 5 6\n        8 9 10\n         */\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n        // article \"Quaternion Calculus and Fast Animation\".\n        const trace = m[0] + m[5] + m[10];\n        if (trace > 0.0) {\n            // |w| > 1/2, may as well choose w > 1/2\n            const root = Math.sqrt(trace + 1); // 2w\n            dst[3] = 0.5 * root;\n            const invRoot = 0.5 / root; // 1/(4w)\n            dst[0] = (m[6] - m[9]) * invRoot;\n            dst[1] = (m[8] - m[2]) * invRoot;\n            dst[2] = (m[1] - m[4]) * invRoot;\n        }\n        else {\n            // |w| <= 1/2\n            let i = 0;\n            if (m[5] > m[0]) {\n                i = 1;\n            }\n            if (m[10] > m[i * 4 + i]) {\n                i = 2;\n            }\n            const j = (i + 1) % 3;\n            const k = (i + 2) % 3;\n            const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n            dst[i] = 0.5 * root;\n            const invRoot = 0.5 / root;\n            dst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n            dst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n            dst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n        }\n        return dst;\n    }\n    /**\n     * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n     *\n     * @param xAngleInRadians - angle to rotate around X axis in radians.\n     * @param yAngleInRadians - angle to rotate around Y axis in radians.\n     * @param zAngleInRadians - angle to rotate around Z axis in radians.\n     * @param order - order to apply euler angles\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n     */\n    function fromEuler(xAngleInRadians, yAngleInRadians, zAngleInRadians, order, dst) {\n        dst = dst || new QuatType(4);\n        const xHalfAngle = xAngleInRadians * 0.5;\n        const yHalfAngle = yAngleInRadians * 0.5;\n        const zHalfAngle = zAngleInRadians * 0.5;\n        const sx = Math.sin(xHalfAngle);\n        const cx = Math.cos(xHalfAngle);\n        const sy = Math.sin(yHalfAngle);\n        const cy = Math.cos(yHalfAngle);\n        const sz = Math.sin(zHalfAngle);\n        const cz = Math.cos(zHalfAngle);\n        switch (order) {\n            case 'xyz':\n                dst[0] = sx * cy * cz + cx * sy * sz;\n                dst[1] = cx * sy * cz - sx * cy * sz;\n                dst[2] = cx * cy * sz + sx * sy * cz;\n                dst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'xzy':\n                dst[0] = sx * cy * cz - cx * sy * sz;\n                dst[1] = cx * sy * cz - sx * cy * sz;\n                dst[2] = cx * cy * sz + sx * sy * cz;\n                dst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yxz':\n                dst[0] = sx * cy * cz + cx * sy * sz;\n                dst[1] = cx * sy * cz - sx * cy * sz;\n                dst[2] = cx * cy * sz - sx * sy * cz;\n                dst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yzx':\n                dst[0] = sx * cy * cz + cx * sy * sz;\n                dst[1] = cx * sy * cz + sx * cy * sz;\n                dst[2] = cx * cy * sz - sx * sy * cz;\n                dst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zxy':\n                dst[0] = sx * cy * cz - cx * sy * sz;\n                dst[1] = cx * sy * cz + sx * cy * sz;\n                dst[2] = cx * cy * sz + sx * sy * cz;\n                dst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zyx':\n                dst[0] = sx * cy * cz - cx * sy * sz;\n                dst[1] = cx * sy * cz + sx * cy * sz;\n                dst[2] = cx * cy * sz - sx * sy * cz;\n                dst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            default:\n                throw new Error(`Unknown rotation order: ${order}`);\n        }\n        return dst;\n    }\n    /**\n     * Copies a quaternion. (same as {@link quat.clone})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is a copy of q\n     */\n    function copy$1(q, dst) {\n        dst = dst || new QuatType(4);\n        dst[0] = q[0];\n        dst[1] = q[1];\n        dst[2] = q[2];\n        dst[3] = q[3];\n        return dst;\n    }\n    /**\n     * Clones a quaternion. (same as {@link quat.copy})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A copy of q.\n     */\n    const clone$1 = copy$1;\n    /**\n     * Adds two quaternions; assumes a and b have the same dimension.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the sum of a and b.\n     */\n    function add$1(a, b, dst) {\n        dst = dst || new QuatType(4);\n        dst[0] = a[0] + b[0];\n        dst[1] = a[1] + b[1];\n        dst[2] = a[2] + b[2];\n        dst[3] = a[3] + b[3];\n        return dst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    function subtract$1(a, b, dst) {\n        dst = dst || new QuatType(4);\n        dst[0] = a[0] - b[0];\n        dst[1] = a[1] - b[1];\n        dst[2] = a[2] - b[2];\n        dst[3] = a[3] - b[3];\n        return dst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    const sub$1 = subtract$1;\n    /**\n     * Multiplies a quaternion by a scalar.\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function mulScalar$1(v, k, dst) {\n        dst = dst || new QuatType(4);\n        dst[0] = v[0] * k;\n        dst[1] = v[1] * k;\n        dst[2] = v[2] * k;\n        dst[3] = v[3] * k;\n        return dst;\n    }\n    /**\n     * Multiplies a quaternion by a scalar. (same as mulScalar)\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    const scale$1 = mulScalar$1;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function divScalar$1(v, k, dst) {\n        dst = dst || new QuatType(4);\n        dst[0] = v[0] / k;\n        dst[1] = v[1] / k;\n        dst[2] = v[2] / k;\n        dst[3] = v[3] / k;\n        return dst;\n    }\n    /**\n     * Computes the dot product of two quaternions\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns dot product\n     */\n    function dot$1(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Performs linear interpolation on two quaternions.\n     * Given quaternions a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param t - Interpolation coefficient.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp$1(a, b, t, dst) {\n        dst = dst || new QuatType(4);\n        dst[0] = a[0] + t * (b[0] - a[0]);\n        dst[1] = a[1] + t * (b[1] - a[1]);\n        dst[2] = a[2] + t * (b[2] - a[2]);\n        dst[3] = a[3] + t * (b[3] - a[3]);\n        return dst;\n    }\n    /**\n     * Computes the length of quaternion\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    function length$1(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of quaternion (same as length)\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    const len$1 = length$1;\n    /**\n     * Computes the square of the length of quaternion\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    function lengthSq$1(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of quaternion (same as lengthSq)\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    const lenSq$1 = lengthSq$1;\n    /**\n     * Divides a quaternion by its Euclidean length and returns the quotient.\n     * @param v - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The normalized quaternion.\n     */\n    function normalize$1(v, dst) {\n        dst = dst || new QuatType(4);\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            dst[0] = v0 / len;\n            dst[1] = v1 / len;\n            dst[2] = v2 / len;\n            dst[3] = v3 / len;\n        }\n        else {\n            dst[0] = 0;\n            dst[1] = 0;\n            dst[2] = 0;\n            dst[3] = 0;\n        }\n        return dst;\n    }\n    /**\n     * Check if 2 quaternions are approximately equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are approximately equal\n     */\n    function equalsApproximately$1(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 quaternions are exactly equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are exactly equal\n     */\n    function equals$1(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Creates an identity quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns an identity quaternion\n     */\n    function identity(dst) {\n        dst = dst || new QuatType(4);\n        dst[0] = 0;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 1;\n        return dst;\n    }\n    let tempVec3;\n    let xUnitVec3;\n    let yUnitVec3;\n    /**\n     * Computes a quaternion to represent the shortest rotation from one vector to another.\n     *\n     * @param aUnit - the start vector\n     * @param bUnit - the end vector\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function rotationTo(aUnit, bUnit, dst) {\n        dst = dst || new QuatType(4);\n        tempVec3 = tempVec3 || create$4();\n        xUnitVec3 = xUnitVec3 || create$4(1, 0, 0);\n        yUnitVec3 = yUnitVec3 || create$4(0, 1, 0);\n        const dot = dot$2(aUnit, bUnit);\n        if (dot < -0.999999) {\n            cross(xUnitVec3, aUnit, tempVec3);\n            if (len$2(tempVec3) < 0.000001) {\n                cross(yUnitVec3, aUnit, tempVec3);\n            }\n            normalize$2(tempVec3, tempVec3);\n            fromAxisAngle(tempVec3, Math.PI, dst);\n            return dst;\n        }\n        else if (dot > 0.999999) {\n            dst[0] = 0;\n            dst[1] = 0;\n            dst[2] = 0;\n            dst[3] = 1;\n            return dst;\n        }\n        else {\n            cross(aUnit, bUnit, tempVec3);\n            dst[0] = tempVec3[0];\n            dst[1] = tempVec3[1];\n            dst[2] = tempVec3[2];\n            dst[3] = 1 + dot;\n            return normalize$1(dst, dst);\n        }\n    }\n    let tempQuat1;\n    let tempQuat2;\n    /**\n     * Performs a spherical linear interpolation with two control points\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param c - the third quaternion\n     * @param d - the fourth quaternion\n     * @param t - Interpolation coefficient 0 to 1\n     * @returns result\n     */\n    function sqlerp(a, b, c, d, t, dst) {\n        dst = dst || new QuatType(4);\n        tempQuat1 = tempQuat1 || new QuatType(4);\n        tempQuat2 = tempQuat2 || new QuatType(4);\n        slerp(a, d, t, tempQuat1);\n        slerp(b, c, t, tempQuat2);\n        slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), dst);\n        return dst;\n    }\n\n    var quatImpl = {\n        __proto__: null,\n        add: add$1,\n        angle: angle,\n        clone: clone$1,\n        conjugate: conjugate,\n        copy: copy$1,\n        create: create$1,\n        divScalar: divScalar$1,\n        dot: dot$1,\n        equals: equals$1,\n        equalsApproximately: equalsApproximately$1,\n        fromAxisAngle: fromAxisAngle,\n        fromEuler: fromEuler,\n        fromMat: fromMat,\n        fromValues: fromValues$1,\n        identity: identity,\n        inverse: inverse$1,\n        len: len$1,\n        lenSq: lenSq$1,\n        length: length$1,\n        lengthSq: lengthSq$1,\n        lerp: lerp$1,\n        mul: mul$1,\n        mulScalar: mulScalar$1,\n        multiply: multiply$1,\n        normalize: normalize$1,\n        rotateX: rotateX,\n        rotateY: rotateY,\n        rotateZ: rotateZ,\n        rotationTo: rotationTo,\n        scale: scale$1,\n        set: set$1,\n        setDefaultType: setDefaultType$2,\n        slerp: slerp,\n        sqlerp: sqlerp,\n        sub: sub$1,\n        subtract: subtract$1,\n        toAxisAngle: toAxisAngle\n    };\n\n    /*\n     * Copyright 2022 Gregg Tavares\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a\n     * copy of this software and associated documentation files (the \"Software\"),\n     * to deal in the Software without restriction, including without limitation\n     * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     * and/or sell copies of the Software, and to permit persons to whom the\n     * Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n     * DEALINGS IN THE SOFTWARE.\n     */\n    /**\n     *\n     * Vec4 math functions.\n     *\n     * Almost all functions take an optional `dst` argument. If it is not passed in the\n     * functions will create a new `Vec4`. In other words you can do this\n     *\n     *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n     *\n     * or\n     *\n     *     const v = vec4.create();\n     *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always safe to pass any vector as the destination. So for example\n     *\n     *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n     *\n     */\n    let VecType = Float32Array;\n    /**\n     * Sets the type this library creates for a Vec4\n     * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n     * @returns previous constructor for Vec4\n     */\n    function setDefaultType$1(ctor) {\n        const oldType = VecType;\n        VecType = ctor;\n        return oldType;\n    }\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const dst = new VecType(4);\n        if (x !== undefined) {\n            dst[0] = x;\n            if (y !== undefined) {\n                dst[1] = y;\n                if (z !== undefined) {\n                    dst[2] = z;\n                    if (w !== undefined) {\n                        dst[3] = w;\n                    }\n                }\n            }\n        }\n        return dst;\n    }\n\n    /*\n     * Copyright 2022 Gregg Tavares\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a\n     * copy of this software and associated documentation files (the \"Software\"),\n     * to deal in the Software without restriction, including without limitation\n     * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     * and/or sell copies of the Software, and to permit persons to whom the\n     * Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n     * DEALINGS IN THE SOFTWARE.\n     */\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec4\n     * Also see {@link vec4.create} and {@link vec4.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = x;\n        dst[1] = y;\n        dst[2] = z;\n        dst[3] = w;\n        return dst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = Math.ceil(v[0]);\n        dst[1] = Math.ceil(v[1]);\n        dst[2] = Math.ceil(v[2]);\n        dst[3] = Math.ceil(v[3]);\n        return dst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = Math.floor(v[0]);\n        dst[1] = Math.floor(v[1]);\n        dst[2] = Math.floor(v[2]);\n        dst[3] = Math.floor(v[3]);\n        return dst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = Math.round(v[0]);\n        dst[1] = Math.round(v[1]);\n        dst[2] = Math.round(v[2]);\n        dst[3] = Math.round(v[3]);\n        return dst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = Math.min(max, Math.max(min, v[0]));\n        dst[1] = Math.min(max, Math.max(min, v[1]));\n        dst[2] = Math.min(max, Math.max(min, v[2]));\n        dst[3] = Math.min(max, Math.max(min, v[3]));\n        return dst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = a[0] + b[0];\n        dst[1] = a[1] + b[1];\n        dst[2] = a[2] + b[2];\n        dst[3] = a[3] + b[3];\n        return dst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = a[0] + b[0] * scale;\n        dst[1] = a[1] + b[1] * scale;\n        dst[2] = a[2] + b[2] * scale;\n        dst[3] = a[3] + b[3] * scale;\n        return dst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = a[0] - b[0];\n        dst[1] = a[1] - b[1];\n        dst[2] = a[2] - b[2];\n        dst[3] = a[3] - b[3];\n        return dst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = a[0] + t * (b[0] - a[0]);\n        dst[1] = a[1] + t * (b[1] - a[1]);\n        dst[2] = a[2] + t * (b[2] - a[2]);\n        dst[3] = a[3] + t * (b[3] - a[3]);\n        return dst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = a[0] + t[0] * (b[0] - a[0]);\n        dst[1] = a[1] + t[1] * (b[1] - a[1]);\n        dst[2] = a[2] + t[2] * (b[2] - a[2]);\n        dst[3] = a[3] + t[3] * (b[3] - a[3]);\n        return dst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = Math.max(a[0], b[0]);\n        dst[1] = Math.max(a[1], b[1]);\n        dst[2] = Math.max(a[2], b[2]);\n        dst[3] = Math.max(a[3], b[3]);\n        return dst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = Math.min(a[0], b[0]);\n        dst[1] = Math.min(a[1], b[1]);\n        dst[2] = Math.min(a[2], b[2]);\n        dst[3] = Math.min(a[3], b[3]);\n        return dst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = v[0] * k;\n        dst[1] = v[1] * k;\n        dst[2] = v[2] * k;\n        dst[3] = v[3] * k;\n        return dst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = v[0] / k;\n        dst[1] = v[1] / k;\n        dst[2] = v[2] / k;\n        dst[3] = v[3] / k;\n        return dst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = 1 / v[0];\n        dst[1] = 1 / v[1];\n        dst[2] = 1 / v[2];\n        dst[3] = 1 / v[3];\n        return dst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the dot product of two vectors\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return dx * dx + dy * dy + dz * dz + dw * dw;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        dst = dst || new VecType(4);\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            dst[0] = v0 / len;\n            dst[1] = v1 / len;\n            dst[2] = v2 / len;\n            dst[3] = v3 / len;\n        }\n        else {\n            dst[0] = 0;\n            dst[1] = 0;\n            dst[2] = 0;\n            dst[3] = 0;\n        }\n        return dst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = -v[0];\n        dst[1] = -v[1];\n        dst[2] = -v[2];\n        dst[3] = -v[3];\n        return dst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec4.clone})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = v[0];\n        dst[1] = v[1];\n        dst[2] = v[2];\n        dst[3] = v[3];\n        return dst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec4.copy})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = a[0] * b[0];\n        dst[1] = a[1] * b[1];\n        dst[2] = a[2] * b[2];\n        dst[3] = a[3] * b[3];\n        return dst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        dst = dst || new VecType(4);\n        dst[0] = a[0] / b[0];\n        dst[1] = a[1] / b[1];\n        dst[2] = a[2] / b[2];\n        dst[3] = a[3] / b[3];\n        return dst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        dst = dst || new VecType(4);\n        dst[0] = 0;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n        return dst;\n    }\n    /**\n     * transform vec4 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec4 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        dst = dst || new VecType(4);\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = v[3];\n        dst[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n        dst[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n        dst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n        dst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n        return dst;\n    }\n    /**\n     * Treat a 4D vector as a direction and set it's length\n     *\n     * @param a The vec4 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        dst = dst || new VecType(4);\n        normalize(a, dst);\n        return mulScalar(dst, len, dst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec4 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        dst = dst || new VecType(4);\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, dst);\n        }\n        return copy(a, dst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        dst = dst || new VecType(4);\n        return lerp(a, b, 0.5, dst);\n    }\n\n    var vec4Impl = {\n        __proto__: null,\n        add: add,\n        addScaled: addScaled,\n        ceil: ceil,\n        clamp: clamp,\n        clone: clone,\n        copy: copy,\n        create: create,\n        dist: dist,\n        distSq: distSq,\n        distance: distance,\n        distanceSq: distanceSq,\n        div: div,\n        divScalar: divScalar,\n        divide: divide,\n        dot: dot,\n        equals: equals,\n        equalsApproximately: equalsApproximately,\n        floor: floor,\n        fromValues: fromValues,\n        inverse: inverse,\n        invert: invert,\n        len: len,\n        lenSq: lenSq,\n        length: length,\n        lengthSq: lengthSq,\n        lerp: lerp,\n        lerpV: lerpV,\n        max: max,\n        midpoint: midpoint,\n        min: min,\n        mul: mul,\n        mulScalar: mulScalar,\n        multiply: multiply,\n        negate: negate,\n        normalize: normalize,\n        round: round,\n        scale: scale,\n        set: set,\n        setDefaultType: setDefaultType$1,\n        setLength: setLength,\n        sub: sub,\n        subtract: subtract,\n        transformMat4: transformMat4,\n        truncate: truncate,\n        zero: zero\n    };\n\n    /**\n     * Sets the type this library creates for all types\n     *\n     * example:\n     *\n     * ```\n     * setDefaultType(Float64Array);\n     * ```\n     *\n     * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n     */\n    function setDefaultType(ctor) {\n        setDefaultType$4(ctor);\n        setDefaultType$3(ctor);\n        setDefaultType$2(ctor);\n        setDefaultType$6(ctor);\n        setDefaultType$5(ctor);\n        setDefaultType$1(ctor);\n    }\n\n    exports.mat3 = mat3Impl;\n    exports.mat4 = mat4Impl;\n    exports.quat = quatImpl;\n    exports.setDefaultType = setDefaultType;\n    exports.utils = utils;\n    exports.vec2 = vec2Impl;\n    exports.vec3 = vec3Impl;\n    exports.vec4 = vec4Impl;\n\n}));\n//# sourceMappingURL=wgpu-matrix.js.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./main.ts\");\n",""],"names":[],"sourceRoot":""}